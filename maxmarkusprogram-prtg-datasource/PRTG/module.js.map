{"version":3,"file":"module.js","mappings":"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","sources":["webpack://maxmarkusprogram-prtg-datasource/external amd \"@grafana/ui\"","webpack://maxmarkusprogram-prtg-datasource/external amd \"lodash\"","webpack://maxmarkusprogram-prtg-datasource/external amd \"rxjs\"","webpack://maxmarkusprogram-prtg-datasource/external amd \"module\"","webpack://maxmarkusprogram-prtg-datasource/external amd \"@grafana/runtime\"","webpack://maxmarkusprogram-prtg-datasource/external amd \"@grafana/data\"","webpack://maxmarkusprogram-prtg-datasource/external amd \"react\"","webpack://maxmarkusprogram-prtg-datasource/webpack/bootstrap","webpack://maxmarkusprogram-prtg-datasource/webpack/runtime/compat get default export","webpack://maxmarkusprogram-prtg-datasource/webpack/runtime/define property getters","webpack://maxmarkusprogram-prtg-datasource/webpack/runtime/hasOwnProperty shorthand","webpack://maxmarkusprogram-prtg-datasource/webpack/runtime/make namespace object","webpack://maxmarkusprogram-prtg-datasource/webpack/runtime/publicPath","webpack://maxmarkusprogram-prtg-datasource/./node_modules/grafana-public-path.js","webpack://maxmarkusprogram-prtg-datasource/./types.ts","webpack://maxmarkusprogram-prtg-datasource/./datasource.ts","webpack://maxmarkusprogram-prtg-datasource/./module.ts","webpack://maxmarkusprogram-prtg-datasource/./components/ConfigEditor.tsx","webpack://maxmarkusprogram-prtg-datasource/./components/QueryEditor.tsx"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__7__;","module.exports = __WEBPACK_EXTERNAL_MODULE__241__;","module.exports = __WEBPACK_EXTERNAL_MODULE__269__;","module.exports = __WEBPACK_EXTERNAL_MODULE__308__;","module.exports = __WEBPACK_EXTERNAL_MODULE__531__;","module.exports = __WEBPACK_EXTERNAL_MODULE__781__;","module.exports = __WEBPACK_EXTERNAL_MODULE__959__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"public/plugins/maxmarkusprogram-prtg-datasource/\";","\nimport amdMetaModule from 'amd-module';\n\n__webpack_public_path__ =\n  amdMetaModule && amdMetaModule.uri\n    ? amdMetaModule.uri.slice(0, amdMetaModule.uri.lastIndexOf('/') + 1)\n    : 'public/plugins/maxmarkusprogram-prtg-datasource/';\n","import { DataSourceJsonData } from '@grafana/data';\r\nimport { DataQuery } from '@grafana/schema';\r\n\r\nexport enum QueryType {\r\n  Metrics = 'metrics',\r\n  Raw = 'raw',\r\n  Text = 'text',\r\n  Manual = 'manual',\r\n  Logs = 'logs',\r\n}\r\n\r\nexport interface MyQuery extends DataQuery {\r\n  queryType: QueryType;\r\n  group: string;\r\n  groupId: string;\r\n  device: string;\r\n  deviceId: string;\r\n  sensor: string;\r\n  sensorId: string;\r\n  channel: string;\r\n  channelArray: string[];\r\n  manualMethod?: string;\r\n  manualObjectId?: string;\r\n  property?: string;\r\n  filterProperty?: string;\r\n  includeGroupName?: boolean;\r\n  includeDeviceName?: boolean;\r\n  includeSensorName?: boolean;\r\n  isStreaming?: boolean;\r\n  streamInterval?: number;\r\n  keepGraphsVisible?: boolean; // Add this new property\r\n  refId: string;\r\n  // Add log specific fields\r\n  logLevel?: string;\r\n  logMessage?: string;\r\n}\r\n\r\n// Add new interface for manual API methods\r\nexport interface ManualApiMethod {\r\n  label: string;\r\n  value: string;\r\n  description: string;\r\n}\r\n\r\nexport const manualApiMethods: ManualApiMethod[] = [\r\n /*  {\r\n    label: 'Get Object Property',\r\n    value: 'getobjectproperty.htm',\r\n    description: 'Retrieve specific property of an object',\r\n  }, */\r\n  {\r\n    label: 'Get Sensor Details',\r\n    value: 'getsensordetails.json',\r\n    description: 'Get detailed information about a sensor',\r\n  },\r\n  {\r\n    label: 'Get Status',\r\n    value: 'getstatus.htm',\r\n    description: 'Retrieve system status information',\r\n  },\r\n];\r\n\r\n/**\r\n * These are options configured for each DataSource instance\r\n */\r\nexport interface MyDataSourceOptions extends DataSourceJsonData {\r\n  path?: string;\r\n  cacheTime?: number;\r\n  timezone?: string;\r\n}\r\n\r\nexport interface MySecureJsonData {\r\n  apiKey?: string;\r\n}\r\n\r\n/* ################################### QUERY TYPE OPTION ###################################### */\r\nexport interface QueryTypeOptions {\r\n  label: string;\r\n  value: QueryType;\r\n}\r\n\r\nexport const queryTypeOptions = Object.keys(QueryType).map((key) => ({\r\n  label: key,\r\n  value: QueryType[key as keyof typeof QueryType],\r\n}));\r\n\r\nexport interface ListItem {\r\n  name: string;\r\n  visible_name: string;\r\n}\r\n\r\n/* ################################### PRTG ITEMS ###################################### */\r\nexport interface PRTGItem {\r\n  active: boolean;\r\n  active_raw: number;\r\n  channel: string;\r\n  channel_raw: string;\r\n  datetime: string;\r\n  datetime_raw: number;\r\n  device: string;\r\n  device_raw: string;\r\n  group: string;\r\n  group_raw: string;\r\n  message: string;\r\n  message_raw: string;\r\n  objid: number;\r\n  objid_raw: number;\r\n  priority: string;\r\n  priority_raw: number;\r\n  sensor: string;\r\n  sensor_raw: string;\r\n  status: string;\r\n  status_raw: number;\r\n  tags: string;\r\n  tags_raw: string;\r\n}\r\n\r\nexport interface PRTGGroupListResponse {\r\n  prtgversion: string;\r\n  treesize: number;\r\n  groups: PRTGItem[];\r\n}\r\n\r\nexport interface PRTGGroupResponse {\r\n  groups: PRTGItem[];\r\n}\r\n\r\nexport interface PRTGDeviceListResponse {\r\n  prtgversion: string;\r\n  treesize: number;\r\n  devices: PRTGItem[];\r\n}\r\n\r\nexport interface PRTGDeviceResponse {\r\n  devices: PRTGItem[];\r\n}\r\n\r\nexport interface PRTGSensorListResponse {\r\n  prtgversion: string;\r\n  treesize: number;\r\n  sensors: PRTGItem[];\r\n}\r\n\r\nexport interface PRTGSensorResponse {\r\n  sensors: PRTGItem[];\r\n}\r\n\r\nexport interface PRTGChannelListResponse {\r\n  prtgversion: string;\r\n  treesize: number;\r\n  values: PRTGItemChannel[];\r\n}\r\n\r\nexport interface PRTGItemChannel {\r\n  [key: string]: number | string;\r\n  datetime: string;\r\n}\r\n\r\n/* ################################### Propert an filter prpoerty ################################################## */\r\n\r\nexport const filterPropertyList = [\r\n  { name: 'active', visible_name: 'Active' },\r\n  { name: 'message_raw', visible_name: 'Message' },\r\n  { name: 'priority', visible_name: 'Priority' },\r\n  { name: 'status', visible_name: 'Status' },\r\n  { name: 'tags', visible_name: 'Tags' },\r\n] as const;\r\n\r\nexport type FilterPropertyItem = typeof filterPropertyList[number];\r\n\r\nexport interface FilterPropertyOption {\r\n  label: string;\r\n  value: FilterPropertyItem['name'];\r\n}\r\n\r\nexport const propertyList = [\r\n  { name: 'group', visible_name: 'Group' },\r\n  { name: 'device', visible_name: 'Device' },\r\n  { name: 'sensor', visible_name: 'Sensor' },\r\n] as const;\r\n\r\nexport type PropertyItem = typeof propertyList[number];\r\n\r\nexport interface PropertyOption {\r\n  label: string;\r\n  value: PropertyItem['name'];\r\n}\r\n\r\n/* ################################################## timezoneOptions ################################################### */\r\n\r\nexport const timezoneOptions = [\r\n  { label: 'UTC', value: 'UTC' },\r\n  { label: 'Zulu', value: 'Zulu' },\r\n  { label: 'Wet', value: 'Wet' },\r\n  { label: 'Africa/Abidjan', value: 'Africa/Abidjan' },\r\n  { label: 'Africa/Accra', value: 'Africa/Accra' },\r\n  { label: 'Africa/Addis_Ababa', value: 'Africa/Addis_Ababa' },\r\n  { label: 'Africa/Algiers', value: 'Africa/Algiers' },\r\n  { label: 'Africa/Asmara', value: 'Africa/Asmara' },\r\n  { label: 'Africa/Asmera', value: 'Africa/Asmera' },\r\n  { label: 'Africa/Bamako', value: 'Africa/Bamako' },\r\n  { label: 'Africa/Bangui', value: 'Africa/Bangui' },\r\n  { label: 'Africa/Banjul', value: 'Africa/Banjul' },\r\n  { label: 'Africa/Bissau', value: 'Africa/Bissau' },\r\n  { label: 'Africa/Blantyre', value: 'Africa/Blantyre' },\r\n  { label: 'Africa/Brazzaville', value: 'Africa/Brazzaville' },\r\n  { label: 'Africa/Bujumbura', value: 'Africa/Bujumbura' },\r\n  { label: 'Africa/Cairo', value: 'Africa/Cairo' },\r\n  { label: 'Africa/Casablanca', value: 'Africa/Casablanca' },\r\n  { label: 'Africa/Ceuta', value: 'Africa/Ceuta' },\r\n  { label: 'Africa/Conakry', value: 'Africa/Conakry' },\r\n  { label: 'Africa/Dakar', value: 'Africa/Dakar' },\r\n  { label: 'Africa/Dar_es_Salaam', value: 'Africa/Dar_es_Salaam' },\r\n  { label: 'Africa/Djibouti', value: 'Africa/Djibouti' },\r\n  { label: 'Africa/Douala', value: 'Africa/Douala' },\r\n  { label: 'Africa/El_Aaiun', value: 'Africa/El_Aaiun' },\r\n  { label: 'Africa/Freetown', value: 'Africa/Freetown' },\r\n  { label: 'Africa/Gaborone', value: 'Africa/Gaborone' },\r\n  { label: 'Africa/Harare', value: 'Africa/Harare' },\r\n  { label: 'Africa/Johannesburg', value: 'Africa/Johannesburg' },\r\n  { label: 'Africa/Juba', value: 'Africa/Juba' },\r\n  { label: 'Africa/Kampala', value: 'Africa/Kampala' },\r\n  { label: 'Africa/Khartoum', value: 'Africa/Khartoum' },\r\n  { label: 'Africa/Kigali', value: 'Africa/Kigali' },\r\n  { label: 'Africa/Kinshasa', value: 'Africa/Kinshasa' },\r\n  { label: 'Africa/Lagos', value: 'Africa/Lagos' },\r\n  { label: 'Africa/Libreville', value: 'Africa/Libreville' },\r\n  { label: 'Africa/Lome', value: 'Africa/Lome' },\r\n  { label: 'Africa/Luanda', value: 'Africa/Luanda' },\r\n  { label: 'Africa/Lubumbashi', value: 'Africa/Lubumbashi' },\r\n  { label: 'Africa/Lusaka', value: 'Africa/Lusaka' },\r\n  { label: 'Africa/Malabo', value: 'Africa/Malabo' },\r\n  { label: 'Africa/Maputo', value: 'Africa/Maputo' },\r\n  { label: 'Africa/Maseru', value: 'Africa/Maseru' },\r\n  { label: 'Africa/Mbabane', value: 'Africa/Mbabane' },\r\n  { label: 'Africa/Mogadishu', value: 'Africa/Mogadishu' },\r\n  { label: 'Africa/Monrovia', value: 'Africa/Monrovia' },\r\n  { label: 'Africa/Nairobi', value: 'Africa/Nairobi' },\r\n  { label: 'Africa/Ndjamena', value: 'Africa/Ndjamena' },\r\n  { label: 'Africa/Niamey', value: 'Africa/Niamey' },\r\n  { label: 'Africa/Nouakchott', value: 'Africa/Nouakchott' },\r\n  { label: 'Africa/Ouagadougou', value: 'Africa/Ouagadougou' },\r\n  { label: 'Africa/Porto-Novo', value: 'Africa/Porto-Novo' },\r\n  { label: 'Africa/Sao_Tome', value: 'Africa/Sao_Tome' },\r\n  { label: 'Africa/Timbuktu', value: 'Africa/Timbuktu' },\r\n  { label: 'Africa/Tripoli', value: 'Africa/Tripoli' },\r\n  { label: 'Africa/Tunis', value: 'Africa/Tunis' },\r\n  { label: 'Africa/Windhoek', value: 'Africa/Windhoek' },\r\n  { label: 'America/Adak', value: 'America/Adak' },\r\n  { label: 'America/Anchorage', value: 'America/Anchorage' },\r\n  { label: 'America/Anguilla', value: 'America/Anguilla' },\r\n  { label: 'America/Antigua', value: 'America/Antigua' },\r\n  { label: 'America/Araguaina', value: 'America/Araguaina' },\r\n  { label: 'America/Argentina/Buenos_Aires', value: 'America/Argentina/Buenos_Aires' },\r\n  { label: 'America/Argentina/Catamarca', value: 'America/Argentina/Catamarca' },\r\n  { label: 'America/Argentina/ComodRivadavia', value: 'America/Argentina/ComodRivadavia' },\r\n  { label: 'America/Argentina/Cordoba', value: 'America/Argentina/Cordoba' },\r\n  { label: 'America/Argentina/Jujuy', value: 'America/Argentina/Jujuy' },\r\n  { label: 'America/Argentina/La_Rioja', value: 'America/Argentina/La_Rioja' },\r\n  { label: 'America/Argentina/Mendoza', value: 'America/Argentina/Mendoza' },\r\n  { label: 'America/Argentina/Rio_Gallegos', value: 'America/Argentina/Rio_Gallegos' },\r\n  { label: 'America/Argentina/Salta', value: 'America/Argentina/Salta' },\r\n  { label: 'America/Argentina/San_Juan', value: 'America/Argentina/San_Juan' },\r\n  { label: 'America/Argentina/San_Luis', value: 'America/Argentina/San_Luis' },\r\n  { label: 'America/Argentina/Tucuman', value: 'America/Argentina/Tucuman' },\r\n  { label: 'America/Argentina/Ushuaia', value: 'America/Argentina/Ushuaia' },\r\n  { label: 'America/Aruba', value: 'America/Aruba' },\r\n  { label: 'America/Asuncion', value: 'America/Asuncion' },\r\n  { label: 'America/Atikokan', value: 'America/Atikokan' },\r\n  { label: 'America/Atka', value: 'America/Atka' },\r\n  { label: 'America/Bahia', value: 'America/Bahia' },\r\n  { label: 'America/Bahia_Banderas', value: 'America/Bahia_Banderas' },\r\n  { label: 'America/Barbados', value: 'America/Barbados' },\r\n  { label: 'America/Belem', value: 'America/Belem' },\r\n  { label: 'America/Belize', value: 'America/Belize' },\r\n  { label: 'America/Blanc-Sablon', value: 'America/Blanc-Sablon' },\r\n  { label: 'America/Boa_Vista', value: 'America/Boa_Vista' },\r\n  { label: 'America/Bogota', value: 'America/Bogota' },\r\n  { label: 'America/Boise', value: 'America/Boise' },\r\n  { label: 'America/Buenos_Aires', value: 'America/Buenos_Aires' },\r\n  { label: 'America/Cambridge_Bay', value: 'America/Cambridge_Bay' },\r\n  { label: 'America/Campo_Grande', value: 'America/Campo_Grande' },\r\n  { label: 'America/Cancun', value: 'America/Cancun' },\r\n  { label: 'America/Caracas', value: 'America/Caracas' },\r\n  { label: 'America/Catamarca', value: 'America/Catamarca' },\r\n  { label: 'America/Cayenne', value: 'America/Cayenne' },\r\n  { label: 'America/Cayman', value: 'America/Cayman' },\r\n  { label: 'America/Chicago', value: 'America/Chicago' },\r\n  { label: 'America/Chihuahua', value: 'America/Chihuahua' },\r\n  { label: 'America/Ciudad_Juarez', value: 'America/Ciudad_Juarez' },\r\n  { label: 'America/Coral_Harbour', value: 'America/Coral_Harbour' },\r\n  { label: 'America/Cordoba', value: 'America/Cordoba' },\r\n  { label: 'America/Costa_Rica', value: 'America/Costa_Rica' },\r\n  { label: 'America/Creston', value: 'America/Creston' },\r\n  { label: 'America/Cuiaba', value: 'America/Cuiaba' },\r\n  { label: 'America/Curacao', value: 'America/Curacao' },\r\n  { label: 'America/Danmarkshavn', value: 'America/Danmarkshavn' },\r\n  { label: 'America/Dawson', value: 'America/Dawson' },\r\n  { label: 'America/Dawson_Creek', value: 'America/Dawson_Creek' },\r\n  { label: 'America/Denver', value: 'America/Denver' },\r\n  { label: 'America/Detroit', value: 'America/Detroit' },\r\n  { label: 'America/Dominica', value: 'America/Dominica' },\r\n  { label: 'America/Edmonton', value: 'America/Edmonton' },\r\n  { label: 'America/Eirunepe', value: 'America/Eirunepe' },\r\n  { label: 'America/El_Salvador', value: 'America/El_Salvador' },\r\n  { label: 'America/Ensenada', value: 'America/Ensenada' },\r\n  { label: 'America/Fort_Nelson', value: 'America/Fort_Nelson' },\r\n  { label: 'America/Fort_Wayne', value: 'America/Fort_Wayne' },\r\n  { label: 'America/Fortaleza', value: 'America/Fortaleza' },\r\n  { label: 'America/Glace_Bay', value: 'America/Glace_Bay' },\r\n  { label: 'America/Godthab', value: 'America/Godthab' },\r\n  { label: 'America/Goose_Bay', value: 'America/Goose_Bay' },\r\n  { label: 'America/Grand_Turk', value: 'America/Grand_Turk' },\r\n  { label: 'America/Grenada', value: 'America/Grenada' },\r\n  { label: 'America/Guadeloupe', value: 'America/Guadeloupe' },\r\n  { label: 'America/Guatemala', value: 'America/Guatemala' },\r\n  { label: 'America/Guayaquil', value: 'America/Guayaquil' },\r\n  { label: 'America/Guyana', value: 'America/Guyana' },\r\n  { label: 'America/Halifax', value: 'America/Halifax' },\r\n  { label: 'America/Havana', value: 'America/Havana' },\r\n  { label: 'America/Hermosillo', value: 'America/Hermosillo' },\r\n  { label: 'America/Indiana/Indianapolis', value: 'America/Indiana/Indianapolis' },\r\n  { label: 'America/Indiana/Knox', value: 'America/Indiana/Knox' },\r\n  { label: 'America/Indiana/Marengo', value: 'America/Indiana/Marengo' },\r\n  { label: 'America/Indiana/Petersburg', value: 'America/Indiana/Petersburg' },\r\n  { label: 'America/Indiana/Tell_City', value: 'America/Indiana/Tell_City' },\r\n  { label: 'America/Indiana/Vevay', value: 'America/Indiana/Vevay' },\r\n  { label: 'America/Indiana/Vincennes', value: 'America/Indiana/Vincennes' },\r\n  { label: 'America/Indiana/Winamac', value: 'America/Indiana/Winamac' },\r\n  { label: 'America/Indianapolis', value: 'America/Indianapolis' },\r\n  { label: 'America/Inuvik', value: 'America/Inuvik' },\r\n  { label: 'America/Iqaluit', value: 'America/Iqaluit' },\r\n  { label: 'America/Jamaica', value: 'America/Jamaica' },\r\n  { label: 'America/Jujuy', value: 'America/Jujuy' },\r\n  { label: 'America/Juneau', value: 'America/Juneau' },\r\n  { label: 'America/Kentucky/Louisville', value: 'America/Kentucky/Louisville' },\r\n  { label: 'America/Kentucky/Monticello', value: 'America/Kentucky/Monticello' },\r\n  { label: 'America/Knox_IN', value: 'America/Knox_IN' },\r\n  { label: 'America/Kralendijk', value: 'America/Kralendijk' },\r\n  { label: 'America/La_Paz', value: 'America/La_Paz' },\r\n  { label: 'America/Lima', value: 'America/Lima' },\r\n  { label: 'America/Los_Angeles', value: 'America/Los_Angeles' },\r\n  { label: 'America/Louisville', value: 'America/Louisville' },\r\n  { label: 'America/Lower_Princes', value: 'America/Lower_Princes' },\r\n  { label: 'America/Maceio', value: 'America/Maceio' },\r\n  { label: 'America/Managua', value: 'America/Managua' },\r\n  { label: 'America/Manaus', value: 'America/Manaus' },\r\n  { label: 'America/Marigot', value: 'America/Marigot' },\r\n  { label: 'America/Martinique', value: 'America/Martinique' },\r\n  { label: 'America/Matamoros', value: 'America/Matamoros' },\r\n  { label: 'America/Mazatlan', value: 'America/Mazatlan' },\r\n  { label: 'America/Mendoza', value: 'America/Mendoza' },\r\n  { label: 'America/Menominee', value: 'America/Menominee' },\r\n  { label: 'America/Merida', value: 'America/Merida' },\r\n  { label: 'America/Metlakatla', value: 'America/Metlakatla' },\r\n  { label: 'America/Mexico_City', value: 'America/Mexico_City' },\r\n  { label: 'America/Miquelon', value: 'America/Miquelon' },\r\n  { label: 'America/Moncton', value: 'America/Moncton' },\r\n  { label: 'America/Monterrey', value: 'America/Monterrey' },\r\n  { label: 'America/Montevideo', value: 'America/Montevideo' },\r\n  { label: 'America/Montreal', value: 'America/Montreal' },\r\n  { label: 'America/Montserrat', value: 'America/Montserrat' },\r\n  { label: 'America/Nassau', value: 'America/Nassau' },\r\n  { label: 'America/New_York', value: 'America/New_York' },\r\n  { label: 'America/Nipigon', value: 'America/Nipigon' },\r\n  { label: 'America/Nome', value: 'America/Nome' },\r\n  { label: 'America/Noronha', value: 'America/Noronha' },\r\n  { label: 'America/North_Dakota/Beulah', value: 'America/North_Dakota/Beulah' },\r\n  { label: 'America/North_Dakota/Center', value: 'America/North_Dakota/Center' },\r\n  { label: 'America/North_Dakota/New_Salem', value: 'America/North_Dakota/New_Salem' },\r\n  { label: 'America/Nuuk', value: 'America/Nuuk' },\r\n  { label: 'America/Ojinaga', value: 'America/Ojinaga' },\r\n  { label: 'America/Panama', value: 'America/Panama' },\r\n  { label: 'America/Pangnirtung', value: 'America/Pangnirtung' },\r\n  { label: 'America/Paramaribo', value: 'America/Paramaribo' },\r\n  { label: 'America/Phoenix', value: 'America/Phoenix' },\r\n  { label: 'America/Port-au-Prince', value: 'America/Port-au-Prince' },\r\n  { label: 'America/Port_of_Spain', value: 'America/Port_of_Spain' },\r\n  { label: 'America/Porto_Acre', value: 'America/Porto_Acre' },\r\n  { label: 'America/Porto_Velho', value: 'America/Porto_Velho' },\r\n  { label: 'America/Puerto_Rico', value: 'America/Puerto_Rico' },\r\n  { label: 'America/Punta_Arenas', value: 'America/Punta_Arenas' },\r\n  { label: 'America/Rainy_River', value: 'America/Rainy_River' },\r\n  { label: 'America/Rankin_Inlet', value: 'America/Rankin_Inlet' },\r\n  { label: 'America/Recife', value: 'America/Recife' },\r\n  { label: 'America/Regina', value: 'America/Regina' },\r\n  { label: 'America/Resolute', value: 'America/Resolute' },\r\n  { label: 'America/Rio_Branco', value: 'America/Rio_Branco' },\r\n  { label: 'America/Rosario', value: 'America/Rosario' },\r\n  { label: 'America/Santa_Isabel', value: 'America/Santa_Isabel' },\r\n  { label: 'America/Santarem', value: 'America/Santarem' },\r\n  { label: 'America/Santiago', value: 'America/Santiago' },\r\n  { label: 'America/Santo_Domingo', value: 'America/Santo_Domingo' },\r\n  { label: 'America/Sao_Paulo', value: 'America/Sao_Paulo' },\r\n  { label: 'America/Scoresbysund', value: 'America/Scoresbysund' },\r\n  { label: 'America/Shiprock', value: 'America/Shiprock' },\r\n  { label: 'America/Sitka', value: 'America/Sitka' },\r\n  { label: 'America/St_Barthelemy', value: 'America/St_Barthelemy' },\r\n  { label: 'America/St_Johns', value: 'America/St_Johns' },\r\n  { label: 'America/St_Kitts', value: 'America/St_Kitts' },\r\n  { label: 'America/St_Lucia', value: 'America/St_Lucia' },\r\n  { label: 'America/St_Thomas', value: 'America/St_Thomas' },\r\n  { label: 'America/St_Vincent', value: 'America/St_Vincent' },\r\n  { label: 'America/Swift_Current', value: 'America/Swift_Current' },\r\n  { label: 'America/Tegucigalpa', value: 'America/Tegucigalpa' },\r\n  { label: 'America/Thule', value: 'America/Thule' },\r\n  { label: 'America/Thunder_Bay', value: 'America/Thunder_Bay' },\r\n  { label: 'America/Tijuana', value: 'America/Tijuana' },\r\n  { label: 'America/Toronto', value: 'America/Toronto' },\r\n  { label: 'America/Tortola', value: 'America/Tortola' },\r\n  { label: 'America/Vancouver', value: 'America/Vancouver' },\r\n  { label: 'America/Virgin', value: 'America/Virgin' },\r\n  { label: 'America/Whitehorse', value: 'America/Whitehorse' },\r\n  { label: 'America/Winnipeg', value: 'America/Winnipeg' },\r\n  { label: 'America/Yakutat', value: 'America/Yakutat' },\r\n  { label: 'America/Yellowknife', value: 'America/Yellowknife' },\r\n  { label: 'Antarctica/Casey', value: 'Antarctica/Casey' },\r\n  { label: 'Antarctica/Davis', value: 'Antarctica/Davis' },\r\n  { label: 'Antarctica/DumontDUrville', value: 'Antarctica/DumontDUrville' },\r\n  { label: 'Antarctica/Macquarie', value: 'Antarctica/Macquarie' },\r\n  { label: 'Antarctica/Mawson', value: 'Antarctica/Mawson' },\r\n  { label: 'Antarctica/McMurdo', value: 'Antarctica/McMurdo' },\r\n  { label: 'Antarctica/Palmer', value: 'Antarctica/Palmer' },\r\n  { label: 'Antarctica/Rothera', value: 'Antarctica/Rothera' },\r\n  { label: 'Antarctica/South_Pole', value: 'Antarctica/South_Pole' },\r\n  { label: 'Antarctica/Syowa', value: 'Antarctica/Syowa' },\r\n  { label: 'Antarctica/Troll', value: 'Antarctica/Troll' },\r\n  { label: 'Antarctica/Vostok', value: 'Antarctica/Vostok' },\r\n  { label: 'Arctic/Longyearbyen', value: 'Arctic/Longyearbyen' },\r\n  { label: 'Asia/Aden', value: 'Asia/Aden' },\r\n  { label: 'Asia/Almaty', value: 'Asia/Almaty' },\r\n  { label: 'Asia/Amman', value: 'Asia/Amman' },\r\n  { label: 'Asia/Anadyr', value: 'Asia/Anadyr' },\r\n  { label: 'Asia/Aqtau', value: 'Asia/Aqtau' },\r\n  { label: 'Asia/Aqtobe', value: 'Asia/Aqtobe' },\r\n  { label: 'Asia/Ashgabat', value: 'Asia/Ashgabat' },\r\n  { label: 'Asia/Ashkhabad', value: 'Asia/Ashkhabad' },\r\n  { label: 'Asia/Atyrau', value: 'Asia/Atyrau' },\r\n  { label: 'Asia/Baghdad', value: 'Asia/Baghdad' },\r\n  { label: 'Asia/Bahrain', value: 'Asia/Bahrain' },\r\n  { label: 'Asia/Baku', value: 'Asia/Baku' },\r\n  { label: 'Asia/Bangkok', value: 'Asia/Bangkok' },\r\n  { label: 'Asia/Barnaul', value: 'Asia/Barnaul' },\r\n  { label: 'Asia/Beirut', value: 'Asia/Beirut' },\r\n  { label: 'Asia/Bishkek', value: 'Asia/Bishkek' },\r\n  { label: 'Asia/Brunei', value: 'Asia/Brunei' },\r\n  { label: 'Asia/Calcutta', value: 'Asia/Calcutta' },\r\n  { label: 'Asia/Chita', value: 'Asia/Chita' },\r\n  { label: 'Asia/Choibalsan', value: 'Asia/Choibalsan' },\r\n  { label: 'Asia/Chongqing', value: 'Asia/Chongqing' },\r\n  { label: 'Asia/Chungking', value: 'Asia/Chungking' },\r\n  { label: 'Asia/Colombo', value: 'Asia/Colombo' },\r\n  { label: 'Asia/Dacca', value: 'Asia/Dacca' },\r\n  { label: 'Asia/Damascus', value: 'Asia/Damascus' },\r\n  { label: 'Asia/Dhaka', value: 'Asia/Dhaka' },\r\n  { label: 'Asia/Dili', value: 'Asia/Dili' },\r\n  { label: 'Asia/Dubai', value: 'Asia/Dubai' },\r\n  { label: 'Asia/Dushanbe', value: 'Asia/Dushanbe' },\r\n  { label: 'Asia/Famagusta', value: 'Asia/Famagusta' },\r\n  { label: 'Asia/Gaza', value: 'Asia/Gaza' },\r\n  { label: 'Asia/Harbin', value: 'Asia/Harbin' },\r\n  { label: 'Asia/Hebron', value: 'Asia/Hebron' },\r\n  { label: 'Asia/Ho_Chi_Minh', value: 'Asia/Ho_Chi_Minh' },\r\n  { label: 'Asia/Hong_Kong', value: 'Asia/Hong_Kong' },\r\n  { label: 'Asia/Hovd', value: 'Asia/Hovd' },\r\n  { label: 'Asia/Irkutsk', value: 'Asia/Irkutsk' },\r\n  { label: 'Asia/Istanbul', value: 'Asia/Istanbul' },\r\n  { label: 'Asia/Jakarta', value: 'Asia/Jakarta' },\r\n  { label: 'Asia/Jayapura', value: 'Asia/Jayapura' },\r\n  { label: 'Asia/Jerusalem', value: 'Asia/Jerusalem' },\r\n  { label: 'Asia/Kabul', value: 'Asia/Kabul' },\r\n  { label: 'Asia/Kamchatka', value: 'Asia/Kamchatka' },\r\n  { label: 'Asia/Karachi', value: 'Asia/Karachi' },\r\n  { label: 'Asia/Kashgar', value: 'Asia/Kashgar' },\r\n  { label: 'Asia/Kathmandu', value: 'Asia/Kathmandu' },\r\n  { label: 'Asia/Katmandu', value: 'Asia/Katmandu' },\r\n  { label: 'Asia/Khandyga', value: 'Asia/Khandyga' },\r\n  { label: 'Asia/Kolkata', value: 'Asia/Kolkata' },\r\n  { label: 'Asia/Krasnoyarsk', value: 'Asia/Krasnoyarsk' },\r\n  { label: 'Asia/Kuala_Lumpur', value: 'Asia/Kuala_Lumpur' },\r\n  { label: 'Asia/Kuching', value: 'Asia/Kuching' },\r\n  { label: 'Asia/Kuwait', value: 'Asia/Kuwait' },\r\n  { label: 'Asia/Macao', value: 'Asia/Macao' },\r\n  { label: 'Asia/Macau', value: 'Asia/Macau' },\r\n  { label: 'Asia/Magadan', value: 'Asia/Magadan' },\r\n  { label: 'Asia/Makassar', value: 'Asia/Makassar' },\r\n  { label: 'Asia/Manila', value: 'Asia/Manila' },\r\n  { label: 'Asia/Muscat', value: 'Asia/Muscat' },\r\n  { label: 'Asia/Nicosia', value: 'Asia/Nicosia' },\r\n  { label: 'Asia/Novokuznetsk', value: 'Asia/Novokuznetsk' },\r\n  { label: 'Asia/Novosibirsk', value: 'Asia/Novosibirsk' },\r\n  { label: 'Asia/Omsk', value: 'Asia/Omsk' },\r\n  { label: 'Asia/Oral', value: 'Asia/Oral' },\r\n  { label: 'Asia/Phnom_Penh', value: 'Asia/Phnom_Penh' },\r\n  { label: 'Asia/Pontianak', value: 'Asia/Pontianak' },\r\n  { label: 'Asia/Pyongyang', value: 'Asia/Pyongyang' },\r\n  { label: 'Asia/Qatar', value: 'Asia/Qatar' },\r\n  { label: 'Asia/Qostanay', value: 'Asia/Qostanay' },\r\n  { label: 'Asia/Qyzylorda', value: 'Asia/Qyzylorda' },\r\n  { label: 'Asia/Rangoon', value: 'Asia/Rangoon' },\r\n  { label: 'Asia/Riyadh', value: 'Asia/Riyadh' },\r\n  { label: 'Asia/Saigon', value: 'Asia/Saigon' },\r\n  { label: 'Asia/Sakhalin', value: 'Asia/Sakhalin' },\r\n  { label: 'Asia/Samarkand', value: 'Asia/Samarkand' },\r\n  { label: 'Asia/Seoul', value: 'Asia/Seoul' },\r\n  { label: 'Asia/Shanghai', value: 'Asia/Shanghai' },\r\n  { label: 'Asia/Singapore', value: 'Asia/Singapore' },\r\n  { label: 'Asia/Srednekolymsk', value: 'Asia/Srednekolymsk' },\r\n  { label: 'Asia/Taipei', value: 'Asia/Taipei' },\r\n  { label: 'Asia/Tashkent', value: 'Asia/Tashkent' },\r\n  { label: 'Asia/Tbilisi', value: 'Asia/Tbilisi' },\r\n  { label: 'Asia/Tehran', value: 'Asia/Tehran' },\r\n  { label: 'Asia/Tel_Aviv', value: 'Asia/Tel_Aviv' },\r\n  { label: 'Asia/Thimbu', value: 'Asia/Thimbu' },\r\n  { label: 'Asia/Thimphu', value: 'Asia/Thimphu' },\r\n  { label: 'Asia/Tokyo', value: 'Asia/Tokyo' },\r\n  { label: 'Asia/Tomsk', value: 'Asia/Tomsk' },\r\n  { label: 'Asia/Ujung_Pandang', value: 'Asia/Ujung_Pandang' },\r\n  { label: 'Asia/Ulaanbaatar', value: 'Asia/Ulaanbaatar' },\r\n  { label: 'Asia/Ulan_Bator', value: 'Asia/Ulan_Bator' },\r\n  { label: 'Asia/Urumqi', value: 'Asia/Urumqi' },\r\n  { label: 'Asia/Ust-Nera', value: 'Asia/Ust-Nera' },\r\n  { label: 'Asia/Vientiane', value: 'Asia/Vientiane' },\r\n  { label: 'Asia/Vladivostok', value: 'Asia/Vladivostok' },\r\n  { label: 'Asia/Yakutsk', value: 'Asia/Yakutsk' },\r\n  { label: 'Asia/Yangon', value: 'Asia/Yangon' },\r\n  { label: 'Asia/Yekaterinburg', value: 'Asia/Yekaterinburg' },\r\n  { label: 'Asia/Yerevan', value: 'Asia/Yerevan' },\r\n  { label: 'Atlantic/Azores', value: 'Atlantic/Azores' },\r\n  { label: 'Atlantic/Bermuda', value: 'Atlantic/Bermuda' },\r\n  { label: 'Atlantic/Canary', value: 'Atlantic/Canary' },\r\n  { label: 'Atlantic/Cape_Verde', value: 'Atlantic/Cape_Verde' },\r\n  { label: 'Atlantic/Faeroe', value: 'Atlantic/Faeroe' },\r\n  { label: 'Atlantic/Faroe', value: 'Atlantic/Faroe' },\r\n  { label: 'Atlantic/Jan_Mayen', value: 'Atlantic/Jan_Mayen' },\r\n  { label: 'Atlantic/Madeira', value: 'Atlantic/Madeira' },\r\n  { label: 'Atlantic/Reykjavik', value: 'Atlantic/Reykjavik' },\r\n  { label: 'Atlantic/South_Georgia', value: 'Atlantic/South_Georgia' },\r\n  { label: 'Atlantic/St_Helena', value: 'Atlantic/St_Helena' },\r\n  { label: 'Atlantic/Stanley', value: 'Atlantic/Stanley' },\r\n  { label: 'Australia/ACT', value: 'Australia/ACT' },\r\n  { label: 'Australia/Adelaide', value: 'Australia/Adelaide' },\r\n  { label: 'Australia/Brisbane', value: 'Australia/Brisbane' },\r\n  { label: 'Australia/Broken_Hill', value: 'Australia/Broken_Hill' },\r\n  { label: 'Australia/Canberra', value: 'Australia/Canberra' },\r\n  { label: 'Australia/Currie', value: 'Australia/Currie' },\r\n  { label: 'Australia/Darwin', value: 'Australia/Darwin' },\r\n  { label: 'Australia/Eucla', value: 'Australia/Eucla' },\r\n  { label: 'Australia/Hobart', value: 'Australia/Hobart' },\r\n  { label: 'Australia/LHI', value: 'Australia/LHI' },\r\n  { label: 'Australia/Lindeman', value: 'Australia/Lindeman' },\r\n  { label: 'Australia/Lord_Howe', value: 'Australia/Lord_Howe' },\r\n  { label: 'Australia/Melbourne', value: 'Australia/Melbourne' },\r\n  { label: 'Australia/NSW', value: 'Australia/NSW' },\r\n  { label: 'Australia/North', value: 'Australia/North' },\r\n  { label: 'Australia/Perth', value: 'Australia/Perth' },\r\n  { label: 'Australia/Queensland', value: 'Australia/Queensland' },\r\n  { label: 'Australia/South', value: 'Australia/South' },\r\n  { label: 'Australia/Sydney', value: 'Australia/Sydney' },\r\n  { label: 'Australia/Tasmania', value: 'Australia/Tasmania' },\r\n  { label: 'Australia/Victoria', value: 'Australia/Victoria' },\r\n  { label: 'Australia/West', value: 'Australia/West' },\r\n  { label: 'Australia/Yancowinna', value: 'Australia/Yancowinna' },\r\n  { label: 'Brazil/Acre', value: 'Brazil/Acre' },\r\n  { label: 'Brazil/DeNoronha', value: 'Brazil/DeNoronha' },\r\n  { label: 'Brazil/East', value: 'Brazil/East' },\r\n  { label: 'Brazil/West', value: 'Brazil/West' },\r\n  { label: 'CET', value: 'CET' },\r\n  { label: 'CST6CDT', value: 'CST6CDT' },\r\n  { label: 'Canada/Atlantic', value: 'Canada/Atlantic' },\r\n  { label: 'Canada/Central', value: 'Canada/Central' },\r\n  { label: 'Canada/Eastern', value: 'Canada/Eastern' },\r\n  { label: 'Canada/Mountain', value: 'Canada/Mountain' },\r\n  { label: 'Canada/Newfoundland', value: 'Canada/Newfoundland' },\r\n  { label: 'Canada/Pacific', value: 'Canada/Pacific' },\r\n  { label: 'Canada/Saskatchewan', value: 'Canada/Saskatchewan' },\r\n  { label: 'Canada/Yukon', value: 'Canada/Yukon' },\r\n  { label: 'Chile/Continental', value: 'Chile/Continental' },\r\n  { label: 'Chile/EasterIsland', value: 'Chile/EasterIsland' },\r\n  { label: 'Cuba', value: 'Cuba' },\r\n  { label: 'EET', value: 'EET' },\r\n  { label: 'EST', value: 'EST' },\r\n  { label: 'EST5EDT', value: 'EST5EDT' },\r\n  { label: 'Egypt', value: 'Egypt' },\r\n  { label: 'Eire', value: 'Eire' },\r\n  { label: 'Etc/GMT', value: 'Etc/GMT' },\r\n  { label: 'Etc/GMT+0', value: 'Etc/GMT+0' },\r\n  { label: 'Etc/GMT+1', value: 'Etc/GMT+1' },\r\n  { label: 'Etc/GMT+10', value: 'Etc/GMT+10' },\r\n  { label: 'Etc/GMT+11', value: 'Etc/GMT+11' },\r\n  { label: 'Etc/GMT+12', value: 'Etc/GMT+12' },\r\n  { label: 'Etc/GMT+2', value: 'Etc/GMT+2' },\r\n  { label: 'Etc/GMT+3', value: 'Etc/GMT+3' },\r\n  { label: 'Etc/GMT+4', value: 'Etc/GMT+4' },\r\n  { label: 'Etc/GMT+5', value: 'Etc/GMT+5' },\r\n  { label: 'Etc/GMT+6', value: 'Etc/GMT+6' },\r\n  { label: 'Etc/GMT+7', value: 'Etc/GMT+7' },\r\n  { label: 'Etc/GMT+8', value: 'Etc/GMT+8' },\r\n  { label: 'Etc/GMT+9', value: 'Etc/GMT+9' },\r\n  { label: 'Etc/GMT-0', value: 'Etc/GMT-0' },\r\n  { label: 'Etc/GMT-1', value: 'Etc/GMT-1' },\r\n  { label: 'Etc/GMT-10', value: 'Etc/GMT-10' },\r\n  { label: 'Etc/GMT-11', value: 'Etc/GMT-11' },\r\n  { label: 'Etc/GMT-12', value: 'Etc/GMT-12' },\r\n  { label: 'Etc/GMT-13', value: 'Etc/GMT-13' },\r\n  { label: 'Etc/GMT-14', value: 'Etc/GMT-14' },\r\n  { label: 'Etc/GMT-2', value: 'Etc/GMT-2' },\r\n  { label: 'Etc/GMT-3', value: 'Etc/GMT-3' },\r\n  { label: 'Etc/GMT-4', value: 'Etc/GMT-4' },\r\n  { label: 'Etc/GMT-5', value: 'Etc/GMT-5' },\r\n  { label: 'Etc/GMT-6', value: 'Etc/GMT-6' },\r\n  { label: 'Etc/GMT-7', value: 'Etc/GMT-7' },\r\n  { label: 'Etc/GMT-8', value: 'Etc/GMT-8' },\r\n  { label: 'Etc/GMT-9', value: 'Etc/GMT-9' },\r\n  { label: 'Etc/GMT0', value: 'Etc/GMT0' },\r\n  { label: 'Etc/Greenwich', value: 'Etc/Greenwich' },\r\n  { label: 'Etc/UCT', value: 'Etc/UCT' },\r\n  { label: 'Etc/UTC', value: 'Etc/UTC' },\r\n  { label: 'Etc/Universal', value: 'Etc/Universal' },\r\n  { label: 'Etc/Zulu', value: 'Etc/Zulu' },\r\n  { label: 'Europe/Amsterdam', value: 'Europe/Amsterdam' },\r\n  { label: 'Europe/Andorra', value: 'Europe/Andorra' },\r\n  { label: 'Europe/Astrakhan', value: 'Europe/Astrakhan' },\r\n  { label: 'Europe/Athens', value: 'Europe/Athens' },\r\n  { label: 'Europe/Belfast', value: 'Europe/Belfast' },\r\n  { label: 'Europe/Belgrade', value: 'Europe/Belgrade' },\r\n  { label: 'Europe/Berlin', value: 'Europe/Berlin' },\r\n  { label: 'Europe/Bratislava', value: 'Europe/Bratislava' },\r\n  { label: 'Europe/Brussels', value: 'Europe/Brussels' },\r\n  { label: 'Europe/Bucharest', value: 'Europe/Bucharest' },\r\n  { label: 'Europe/Budapest', value: 'Europe/Budapest' },\r\n  { label: 'Europe/Busingen', value: 'Europe/Busingen' },\r\n  { label: 'Europe/Chisinau', value: 'Europe/Chisinau' },\r\n  { label: 'Europe/Copenhagen', value: 'Europe/Copenhagen' },\r\n  { label: 'Europe/Dublin', value: 'Europe/Dublin' },\r\n  { label: 'Europe/Gibraltar', value: 'Europe/Gibraltar' },\r\n  { label: 'Europe/Guernsey', value: 'Europe/Guernsey' },\r\n  { label: 'Europe/Helsinki', value: 'Europe/Helsinki' },\r\n  { label: 'Europe/Isle_of_Man', value: 'Europe/Isle_of_Man' },\r\n  { label: 'Europe/Istanbul', value: 'Europe/Istanbul' },\r\n  { label: 'Europe/Jersey', value: 'Europe/Jersey' },\r\n  { label: 'Europe/Kaliningrad', value: 'Europe/Kaliningrad' },\r\n  { label: 'Europe/Kiev', value: 'Europe/Kiev' },\r\n  { label: 'Europe/Kirov', value: 'Europe/Kirov' },\r\n  { label: 'Europe/Kyiv', value: 'Europe/Kyiv' },\r\n  { label: 'Europe/Lisbon', value: 'Europe/Lisbon' },\r\n  { label: 'Europe/Ljubljana', value: 'Europe/Ljubljana' },\r\n  { label: 'Europe/London', value: 'Europe/London' },\r\n  { label: 'Europe/Luxembourg', value: 'Europe/Luxembourg' },\r\n  { label: 'Europe/Madrid', value: 'Europe/Madrid' },\r\n  { label: 'Europe/Malta', value: 'Europe/Malta' },\r\n  { label: 'Europe/Mariehamn', value: 'Europe/Mariehamn' },\r\n  { label: 'Europe/Minsk', value: 'Europe/Minsk' },\r\n  { label: 'Europe/Monaco', value: 'Europe/Monaco' },\r\n  { label: 'Europe/Moscow', value: 'Europe/Moscow' },\r\n  { label: 'Europe/Nicosia', value: 'Europe/Nicosia' },\r\n  { label: 'Europe/Oslo', value: 'Europe/Oslo' },\r\n  { label: 'Europe/Paris', value: 'Europe/Paris' },\r\n  { label: 'Europe/Podgorica', value: 'Europe/Podgorica' },\r\n  { label: 'Europe/Prague', value: 'Europe/Prague' },\r\n  { label: 'Europe/Riga', value: 'Europe/Riga' },\r\n  { label: 'Europe/Rome', value: 'Europe/Rome' },\r\n  { label: 'Europe/Samara', value: 'Europe/Samara' },\r\n  { label: 'Europe/San_Marino', value: 'Europe/San_Marino' },\r\n  { label: 'Europe/Sarajevo', value: 'Europe/Sarajevo' },\r\n  { label: 'Europe/Saratov', value: 'Europe/Saratov' },\r\n  { label: 'Europe/Simferopol', value: 'Europe/Simferopol' },\r\n  { label: 'Europe/Skopje', value: 'Europe/Skopje' },\r\n  { label: 'Europe/Sofia', value: 'Europe/Sofia' },\r\n  { label: 'Europe/Stockholm', value: 'Europe/Stockholm' },\r\n  { label: 'Europe/Tallinn', value: 'Europe/Tallinn' },\r\n  { label: 'Europe/Tirane', value: 'Europe/Tirane' },\r\n  { label: 'Europe/Tiraspol', value: 'Europe/Tiraspol' },\r\n  { label: 'Europe/Ulyanovsk', value: 'Europe/Ulyanovsk' },\r\n  { label: 'Europe/Uzhgorod', value: 'Europe/Uzhgorod' },\r\n  { label: 'Europe/Vaduz', value: 'Europe/Vaduz' },\r\n  { label: 'Europe/Vatican', value: 'Europe/Vatican' },\r\n  { label: 'Europe/Vienna', value: 'Europe/Vienna' },\r\n  { label: 'Europe/Vilnius', value: 'Europe/Vilnius' },\r\n  { label: 'Europe/Volgograd', value: 'Europe/Volgograd' },\r\n  { label: 'Europe/Warsaw', value: 'Europe/Warsaw' },\r\n  { label: 'Europe/Zagreb', value: 'Europe/Zagreb' },\r\n  { label: 'Europe/Zaporozhye', value: 'Europe/Zaporozhye' },\r\n  { label: 'Europe/Zurich', value: 'Europe/Zurich' },\r\n  { label: 'GB', value: 'GB' },\r\n  { label: 'GB-Eire', value: 'GB-Eire' },\r\n  { label: 'GMT', value: 'GMT' },\r\n  { label: 'GMT+0', value: 'GMT+0' },\r\n  { label: 'GMT-0', value: 'GMT-0' },\r\n  { label: 'GMT0', value: 'GMT0' },\r\n  { label: 'Greenwich', value: 'Greenwich' },\r\n  { label: 'HST', value: 'HST' },\r\n  { label: 'Hongkong', value: 'Hongkong' },\r\n  { label: 'Iceland', value: 'Iceland' },\r\n  { label: 'Indian/Antananarivo', value: 'Indian/Antananarivo' },\r\n  { label: 'Indian/Chagos', value: 'Indian/Chagos' },\r\n  { label: 'Indian/Christmas', value: 'Indian/Christmas' },\r\n  { label: 'Indian/Cocos', value: 'Indian/Cocos' },\r\n  { label: 'Indian/Comoro', value: 'Indian/Comoro' },\r\n  { label: 'Indian/Kerguelen', value: 'Indian/Kerguelen' },\r\n  { label: 'Indian/Mahe', value: 'Indian/Mahe' },\r\n  { label: 'Indian/Maldives', value: 'Indian/Maldives' },\r\n  { label: 'Indian/Mauritius', value: 'Indian/Mauritius' },\r\n  { label: 'Indian/Mayotte', value: 'Indian/Mayotte' },\r\n  { label: 'Indian/Reunion', value: 'Indian/Reunion' },\r\n  { label: 'Iran', value: 'Iran' },\r\n  { label: 'Israel', value: 'Israel' },\r\n  { label: 'Jamaica', value: 'Jamaica' },\r\n  { label: 'Japan', value: 'Japan' },\r\n  { label: 'Kwajalein', value: 'Kwajalein' },\r\n  { label: 'Libya', value: 'Libya' },\r\n  { label: 'MET', value: 'MET' },\r\n  { label: 'MST', value: 'MST' },\r\n  { label: 'MST7MDT', value: 'MST7MDT' },\r\n  { label: 'Mexico/BajaNorte', value: 'Mexico/BajaNorte' },\r\n  { label: 'Mexico/BajaSur', value: 'Mexico/BajaSur' },\r\n  { label: 'Mexico/General', value: 'Mexico/General' },\r\n  { label: 'NZ', value: 'NZ' },\r\n  { label: 'NZ-CHAT', value: 'NZ-CHAT' },\r\n  { label: 'Navajo', value: 'Navajo' },\r\n  { label: 'PRC', value: 'PRC' },\r\n  { label: 'PST8PDT', value: 'PST8PDT' },\r\n  { label: 'Pacific/Apia', value: 'Pacific/Apia' },\r\n  { label: 'Pacific/Auckland', value: 'Pacific/Auckland' },\r\n  { label: 'Pacific/Bougainville', value: 'Pacific/Bougainville' },\r\n  { label: 'Pacific/Chatham', value: 'Pacific/Chatham' },\r\n  { label: 'Pacific/Chuuk', value: 'Pacific/Chuuk' },\r\n  { label: 'Pacific/Easter', value: 'Pacific/Easter' },\r\n  { label: 'Pacific/Efate', value: 'Pacific/Efate' },\r\n  { label: 'Pacific/Enderbury', value: 'Pacific/Enderbury' },\r\n  { label: 'Pacific/Fakaofo', value: 'Pacific/Fakaofo' },\r\n  { label: 'Pacific/Fiji', value: 'Pacific/Fiji' },\r\n  { label: 'Pacific/Funafuti', value: 'Pacific/Funafuti' },\r\n  { label: 'Pacific/Galapagos', value: 'Pacific/Galapagos' },\r\n  { label: 'Pacific/Gambier', value: 'Pacific/Gambier' },\r\n  { label: 'Pacific/Guadalcanal', value: 'Pacific/Guadalcanal' },\r\n  { label: 'Pacific/Guam', value: 'Pacific/Guam' },\r\n  { label: 'Pacific/Honolulu', value: 'Pacific/Honolulu' },\r\n  { label: 'Pacific/Johnston', value: 'Pacific/Johnston' },\r\n  { label: 'Pacific/Kanton', value: 'Pacific/Kanton' },\r\n  { label: 'Pacific/Kiritimati', value: 'Pacific/Kiritimati' },\r\n  { label: 'Pacific/Kosrae', value: 'Pacific/Kosrae' },\r\n  { label: 'Pacific/Kwajalein', value: 'Pacific/Kwajalein' },\r\n  { label: 'Pacific/Majuro', value: 'Pacific/Majuro' },\r\n  { label: 'Pacific/Marquesas', value: 'Pacific/Marquesas' },\r\n  { label: 'Pacific/Midway', value: 'Pacific/Midway' },\r\n  { label: 'Pacific/Nauru', value: 'Pacific/Nauru' },\r\n  { label: 'Pacific/Niue', value: 'Pacific/Niue' },\r\n  { label: 'Pacific/Norfolk', value: 'Pacific/Norfolk' },\r\n  { label: 'Pacific/Noumea', value: 'Pacific/Noumea' },\r\n  { label: 'Pacific/Pago_Pago', value: 'Pacific/Pago_Pago' },\r\n  { label: 'Pacific/Palau', value: 'Pacific/Palau' },\r\n  { label: 'Pacific/Pitcairn', value: 'Pacific/Pitcairn' },\r\n  { label: 'Pacific/Pohnpei', value: 'Pacific/Pohnpei' },\r\n  { label: 'Pacific/Ponape', value: 'Pacific/Ponape' },\r\n  { label: 'Pacific/Port_Moresby', value: 'Pacific/Port_Moresby' },\r\n  { label: 'Pacific/Rarotonga', value: 'Pacific/Rarotonga' },\r\n  { label: 'Pacific/Saipan', value: 'Pacific/Saipan' },\r\n  { label: 'Pacific/Samoa', value: 'Pacific/Samoa' },\r\n  { label: 'Pacific/Tahiti', value: 'Pacific/Tahiti' },\r\n  { label: 'Pacific/Tarawa', value: 'Pacific/Tarawa' },\r\n  { label: 'Pacific/Tongatapu', value: 'Pacific/Tongatapu' },\r\n  { label: 'Pacific/Truk', value: 'Pacific/Truk' },\r\n  { label: 'Pacific/Wake', value: 'Pacific/Wake' },\r\n  { label: 'Pacific/Wallis', value: 'Pacific/Wallis' },\r\n  { label: 'Pacific/Yap', value: 'Pacific/Yap' },\r\n  { label: 'Poland', value: 'Poland' },\r\n  { label: 'Portugal', value: 'Portugal' },\r\n  { label: 'ROC', value: 'ROC' },\r\n  { label: 'ROK', value: 'ROK' },\r\n  { label: 'Singapore', value: 'Singapore' },\r\n  { label: 'Turkey', value: 'Turkey' },\r\n  { label: 'UCT', value: 'UCT' },\r\n  { label: 'US/Alaska', value: 'US/Alaska' },\r\n  { label: 'US/Aleutian', value: 'US/Aleutian' },\r\n  { label: 'US/Arizona', value: 'US/Arizona' },\r\n  { label: 'US/Central', value: 'US/Central' },\r\n  { label: 'US/East-Indiana', value: 'US/East-Indiana' },\r\n  { label: 'US/Eastern', value: 'US/Eastern' },\r\n  { label: 'US/Hawaii', value: 'US/Hawaii' },\r\n  { label: 'US/Indiana-Starke', value: 'US/Indiana-Starke' },\r\n  { label: 'US/Michigan', value: 'US/Michigan' },\r\n  { label: 'US/Mountain', value: 'US/Mountain' },\r\n  { label: 'US/Pacific', value: 'US/Pacific' },\r\n  { label: 'US/Samoa', value: 'US/Samoa' },\r\n  { label: 'UTC', value: 'UTC' },\r\n  { label: 'Universal', value: 'Universal' },\r\n  { label: 'W-SU', value: 'W-SU' },\r\n  { label: 'WET', value: 'WET' },\r\n  { label: 'Zulu', value: 'Zulu' },\r\n];","import { \r\n  DataSourceInstanceSettings, \r\n  ScopedVars, \r\n  AnnotationEvent,\r\n  DataFrame,\r\n  DataQueryRequest,\r\n  DataQueryResponse,\r\n  LiveChannelScope,\r\n  DataSourceWithSupplementaryQueriesSupport,\r\n  SupplementaryQueryOptions,\r\n  SupplementaryQueryType,\r\n  LogsSampleOptions,\r\n} from '@grafana/data';\r\nimport { \r\n  DataSourceWithBackend, \r\n  getTemplateSrv,\r\n  getGrafanaLiveSrv,\r\n} from '@grafana/runtime';\r\nimport { cloneDeep } from 'lodash';\r\nimport { Observable, from, merge } from 'rxjs';\r\nimport {\r\n  MyQuery,\r\n  MyDataSourceOptions,\r\n  PRTGGroupListResponse,\r\n  PRTGDeviceListResponse,\r\n  PRTGSensorListResponse,\r\n  PRTGChannelListResponse,\r\n  QueryType\r\n} from './types'\r\n\r\nexport class DataSource extends DataSourceWithBackend<MyQuery, MyDataSourceOptions>\r\n  implements DataSourceWithSupplementaryQueriesSupport<MyQuery> {\r\n    cacheTimeOut: number= 0;\r\n  constructor(instanceSettings: DataSourceInstanceSettings<MyDataSourceOptions>) {\r\n    super(instanceSettings);\r\n    this.cacheTimeOut = instanceSettings.jsonData.cacheTime || 0;\r\n  }\r\n\r\n  /* =================================== APPLYTEMPLATEVARIABLES ====================================== */\r\n  applyTemplateVariables(query: MyQuery, scopedVars: ScopedVars) {\r\n    const replaced = getTemplateSrv().replace(query.channel, scopedVars);\r\n    return {\r\n      ...query,\r\n      channel: replaced,\r\n    }\r\n  }\r\n\r\n  filterQuery(query: MyQuery): boolean {\r\n    return !!query.channel\r\n  }\r\n\r\n  /* =================================== GETRESOURCE ====================================== */\r\n  async getGroups(): Promise<PRTGGroupListResponse> {\r\n    return this.getResource('groups')\r\n  }\r\n\r\n  async getDevices(group: string): Promise<PRTGDeviceListResponse> {\r\n    if (!group) {\r\n      throw new Error('group is required')\r\n    }\r\n    return this.getResource(`devices/${encodeURIComponent(group)}`)\r\n  }\r\n\r\n  async getSensors(device: string): Promise<PRTGSensorListResponse> {\r\n    if (!device) {\r\n      throw new Error('device is required');\r\n    }\r\n    return this.getResource(`sensors/${encodeURIComponent(device)}`);\r\n  }\r\n\r\n  async getChannels(sensorId: string): Promise<PRTGChannelListResponse> {\r\n    if (!sensorId) {\r\n      throw new Error('sensorId is required');\r\n    }\r\n    // If you need logging, consider implementing a proper logging mechanism\r\n    const response = await this.getResource(`channels/${encodeURIComponent(sensorId)}`);\r\n    return response;\r\n  }\r\n\r\n  /* =================================== ANNOTATIONS ====================================== */\r\n  annotations = {\r\n    QueryEditor: undefined,\r\n    processEvents: (anno: any, data: DataFrame[]): Observable<AnnotationEvent[]> => {\r\n      const events: AnnotationEvent[] = [];\r\n      \r\n      // Use annotation query values if available\r\n      const sourceQuery = anno.target || {};\r\n      \r\n      data.forEach((frame) => {\r\n        const timeField = frame.fields.find((field) => field.name === 'Time');\r\n        const valueField = frame.fields.find((field) => field.name === 'Value');\r\n\r\n        \r\n        if (timeField && valueField) {\r\n          const firstTime = timeField.values[0];\r\n          const lastTime = timeField.values[timeField.values.length - 1];\r\n          const firstValue = valueField.values[0];\r\n          const panelId = typeof anno.panelId === 'number' ? anno.panelId : undefined;\r\n\r\n          // Use source from annotation query or default to frame name\r\n          const source = sourceQuery.from || frame.name || 'PRTG Channel';\r\n\r\n          const event: AnnotationEvent = {\r\n            time: firstTime,\r\n            timeEnd: lastTime !== firstTime ? lastTime : undefined,\r\n            title: source,\r\n            text: `Value: ${firstValue}`,\r\n            tags: ['prtg', `value:${firstValue}`, `source:${source}`],\r\n            panelId: panelId\r\n          };\r\n\r\n          events.push(event);\r\n        }\r\n      });\r\n\r\n      return from([events]);\r\n    },\r\n  };\r\n\r\n  query(request: DataQueryRequest<MyQuery>): Observable<DataQueryResponse> {\r\n    // Handle streaming queries\r\n    const observables = request.targets.map((query) => {\r\n      if (query.isStreaming) {\r\n        // Create a unique path for each streaming query based on PRTG parameters\r\n        const streamPath = `prtg-stream/${query.sensorId}/${query.channelArray?.join('-')}/${query.streamInterval}`;\r\n        \r\n        return getGrafanaLiveSrv().getDataStream({\r\n          addr: {\r\n            scope: LiveChannelScope.DataSource,\r\n            namespace: this.uid,\r\n            path: streamPath,\r\n            data: {\r\n              ...query,\r\n              sensorId: query.sensorId,\r\n              channels: query.channelArray,\r\n              interval: query.streamInterval,\r\n              group: query.group,\r\n              device: query.device,\r\n              sensor: query.sensor,\r\n            },\r\n          },\r\n        });\r\n      }\r\n      \r\n      // For non-streaming queries, use the regular query handling\r\n      return from(super.query(request));\r\n    });\r\n\r\n    return merge(...observables);\r\n  }\r\n\r\n  getSupportedSupplementaryQueryTypes(): SupplementaryQueryType[] {\r\n    return [SupplementaryQueryType.LogsSample];\r\n  }\r\n\r\n  getSupplementaryQuery(options: SupplementaryQueryOptions, query: MyQuery): MyQuery | undefined {\r\n    if (!this.getSupportedSupplementaryQueryTypes().includes(options.type)) {\r\n      return undefined;\r\n    }\r\n\r\n    switch (options.type) {\r\n      case SupplementaryQueryType.LogsSample:\r\n        return {\r\n          ...query,\r\n          refId: `logs-sample-${query.refId}`,\r\n          queryType: QueryType.Logs,\r\n          // Convert PRTG sensor data to log format\r\n          logLevel: 'info', // You can map sensor status to different log levels\r\n          logMessage: `${query.sensor || 'Unknown sensor'} - ${query.channel || 'All channels'}`\r\n        };\r\n      default:\r\n        return undefined;\r\n    }\r\n  }\r\n\r\n  getSupplementaryRequest(\r\n    type: SupplementaryQueryType,\r\n    request: DataQueryRequest<MyQuery>,\r\n    options?: SupplementaryQueryOptions\r\n  ): DataQueryRequest<MyQuery> | undefined {\r\n    if (!this.getSupportedSupplementaryQueryTypes().includes(type)) {\r\n      return undefined;\r\n    }\r\n\r\n    switch (type) {\r\n      case SupplementaryQueryType.LogsSample:\r\n        const logsSampleOption: LogsSampleOptions =\r\n          options?.type === SupplementaryQueryType.LogsSample ? options : { type };\r\n        return this.getLogsSampleDataProvider(request, logsSampleOption);\r\n      default:\r\n        return undefined;\r\n    }\r\n  }\r\n\r\n  private getLogsSampleDataProvider(\r\n    request: DataQueryRequest<MyQuery>,\r\n    options?: LogsSampleOptions\r\n  ): DataQueryRequest<MyQuery> | undefined {\r\n    const logsSampleRequest = cloneDeep(request);\r\n    const targets = logsSampleRequest.targets\r\n      .map((query) => this.getSupplementaryQuery(\r\n        { \r\n          type: SupplementaryQueryType.LogsSample, \r\n          limit: options?.limit || 100 \r\n        }, \r\n        query\r\n      ))\r\n      .filter((query): query is MyQuery => !!query);\r\n\r\n    if (!targets.length) {\r\n      return undefined;\r\n    }\r\n\r\n    return {\r\n      ...logsSampleRequest,\r\n      targets,\r\n      // Ensure we're requesting data as logs\r\n      intervalMs: 1000, // 1 second interval for logs\r\n      maxDataPoints: options?.limit || 100,\r\n    };\r\n  }\r\n}\r\n","import { DataSourcePlugin } from '@grafana/data';\r\nimport { DataSource } from './datasource';\r\nimport { ConfigEditor } from './components/ConfigEditor';\r\nimport { QueryEditor } from './components/QueryEditor';\r\nimport { MyQuery, MyDataSourceOptions, MySecureJsonData } from './types';\r\n\r\nexport const plugin = new DataSourcePlugin<DataSource, MyQuery, MyDataSourceOptions,MySecureJsonData>(DataSource)\r\n  .setConfigEditor(ConfigEditor)\r\n  .setQueryEditor(QueryEditor);\r\n","import React, { ChangeEvent } from 'react';\r\nimport { InlineField, Input, SecretInput } from '@grafana/ui';\r\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\r\nimport { MyDataSourceOptions, MySecureJsonData , timezoneOptions } from '../types';\r\nimport { Select } from '@grafana/ui';\r\n\r\ninterface Props extends DataSourcePluginOptionsEditorProps<MyDataSourceOptions, MySecureJsonData> {}\r\n\r\nexport function ConfigEditor(props: Props) {\r\n  const { onOptionsChange, options } = props;\r\n  const { jsonData, secureJsonFields, secureJsonData } = options;\r\n\r\n  const onPathChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    onOptionsChange({\r\n      ...options,\r\n      jsonData: {\r\n        ...jsonData,\r\n        path: event.target.value,\r\n      },\r\n    });\r\n  };\r\n\r\n  // Secure field (only sent to the backend)\r\n  const onAPIKeyChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    onOptionsChange({\r\n      ...options,\r\n      secureJsonData: {\r\n        apiKey: event.target.value,\r\n      },\r\n    });\r\n  };\r\n\r\n  const onResetAPIKey = () => {\r\n    onOptionsChange({\r\n      ...options,\r\n      secureJsonFields: {\r\n        ...options.secureJsonFields,\r\n        apiKey: false,\r\n      },\r\n      secureJsonData: {\r\n        ...options.secureJsonData,\r\n        apiKey: '',\r\n      },\r\n    });\r\n  };\r\n  // cachetime \r\n  const onCacheTimeChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    onOptionsChange({\r\n      ...options,\r\n      jsonData: {\r\n        ...jsonData,\r\n        cacheTime: parseInt(event.target.value, 10),\r\n      },\r\n    });\r\n  }\r\n\r\n  // Timezone selection handler\r\n  const onTimezoneChange = (selectedOption: any) => {\r\n    // Update the timezone directly when selection changes\r\n    onOptionsChange({\r\n      ...options,\r\n      jsonData: {\r\n        ...jsonData,\r\n        timezone: selectedOption.value,\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <InlineField label=\"Path\" labelWidth={14} interactive tooltip={'Json field returned to frontend'}>\r\n        <Input\r\n          id=\"config-editor-path\"\r\n          onChange={onPathChange}\r\n          value={jsonData.path}\r\n          placeholder=\"Enter the path, <your.prtg.server> without https://\"\r\n          width={60}\r\n        />\r\n      </InlineField>\r\n      <InlineField label=\"API Key\" labelWidth={14} interactive tooltip={'Secure json field (backend only)'}>\r\n        <SecretInput\r\n          required\r\n          id=\"config-editor-api-key\"\r\n          isConfigured={secureJsonFields.apiKey}\r\n          value={secureJsonData?.apiKey}\r\n          placeholder=\"Enter your API key\"\r\n          width={60}\r\n          onReset={onResetAPIKey}\r\n          onChange={onAPIKeyChange}\r\n        />\r\n      </InlineField>\r\n      <InlineField label=\"Cache Time\" labelWidth={14} interactive tooltip={'Cache time in seconds'}>\r\n        <Input\r\n          id=\"config-editor-cache-time\"\r\n          onChange={onCacheTimeChange}\r\n          value={jsonData.cacheTime}\r\n          placeholder=\"Enter the cache time\"\r\n          width={60}\r\n        />\r\n      </InlineField>\r\n      <InlineField label=\"Timezone\" labelWidth={14} interactive tooltip={'Select the timezone'} required>\r\n        <Select\r\n          options={timezoneOptions}\r\n          value={jsonData.timezone}\r\n          onChange={onTimezoneChange}\r\n          width={60}\r\n        />\r\n      </InlineField>\r\n    </>\r\n  );\r\n}\r\n","import React, { useEffect, useState, useMemo, useCallback, ChangeEvent, useRef } from 'react';\r\nimport {\r\n  InlineField,\r\n  Select,\r\n  Stack,\r\n  FieldSet,\r\n  InlineSwitch,\r\n  Input,\r\n  AsyncMultiSelect,\r\n} from '@grafana/ui';\r\nimport { QueryEditorProps, SelectableValue } from '@grafana/data'\r\nimport { DataSource } from '../datasource'\r\nimport { MyDataSourceOptions, MyQuery, queryTypeOptions, QueryType, propertyList, filterPropertyList, manualApiMethods } from '../types'\r\n\r\ntype Props = QueryEditorProps<DataSource, MyQuery, MyDataSourceOptions>\r\n\r\nexport function QueryEditor({ query, onChange, onRunQuery, datasource }: Props) {\r\n  const prevQueryRef = useRef<MyQuery | null>(null);\r\n\r\n  const runQueryIfChanged = useCallback(() => {\r\n    const currentQuery = JSON.stringify(query);\r\n    const prevQuery = JSON.stringify(prevQueryRef.current);\r\n\r\n    if (currentQuery !== prevQuery) {\r\n      prevQueryRef.current = query;\r\n      onRunQuery();\r\n    }\r\n  }, [query, onRunQuery]);\r\n\r\n  const isMetricsMode = query.queryType === QueryType.Metrics\r\n  const isRawMode = query.queryType === QueryType.Raw\r\n  const isTextMode = query.queryType === QueryType.Text\r\n  const isManualMode = query.queryType === QueryType.Manual\r\n\r\n  /* ===================================================== HOOKS ============================================================*/\r\n  const [group, setGroup] = useState<string>(query.group || '')\r\n  const [device, setDevice] = useState<string>(query.device || '')\r\n  const [sensor, setSensor] = useState<string>(query.sensor || '')\r\n  //@ts-ignore\r\n  const [channel, setChannel] = useState<string>(query.channel || '')\r\n  const [channelQuery, setChannelQuery] = useState<string[]>(query.channelArray || [])\r\n  const [sensorId, setSensorId] = useState<string>(query.sensorId || '')\r\n  const [manualMethod, setManualMethod] = useState<string>(query.manualMethod || '');\r\n  const [manualObjectId, setManualObjectId] = useState<string>(query.manualObjectId || '');\r\n\r\n\r\n  const [lists, setLists] = useState({\r\n    groups: [] as Array<SelectableValue<string>>,\r\n    devices: [] as Array<SelectableValue<string>>,\r\n    sensors: [] as Array<SelectableValue<string>>,\r\n    channels: [] as Array<SelectableValue<string>>,\r\n    values: [] as Array<SelectableValue<string>>,\r\n    properties: [] as Array<SelectableValue<string>>,\r\n    filterProperties: [] as Array<SelectableValue<string>>,\r\n  })\r\n\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n\r\n  /* ================================================== SORT ================================================== */\r\n  lists.groups.sort((a, b) => (a.label ?? '').localeCompare(b.label ?? ''))\r\n  lists.devices.sort((a, b) => (a.label ?? '').localeCompare(b.label ?? ''))\r\n  lists.sensors.sort((a, b) => (a.label ?? '').localeCompare(b.label ?? ''))\r\n  lists.channels.sort((a, b) => (a.label ?? '').localeCompare(b.label ?? ''))\r\n\r\n\r\n\r\n\r\n  /* ================================================== FETCH GROUPS ================================================== */\r\n  useEffect(() => {\r\n    async function fetchGroups() {\r\n      setIsLoading(true)\r\n      try {\r\n        const response = await datasource.getGroups()\r\n        if (response && Array.isArray(response.groups)) {\r\n          const groupOptions = response.groups.map((group) => ({\r\n            label: group.group,\r\n            value: group.group.toString(),\r\n          }))\r\n          setLists((prev) => ({\r\n            ...prev,\r\n            groups: groupOptions,\r\n          }))\r\n        } else {\r\n          console.error('Invalid response format:', response)\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching groups:', error)\r\n      }\r\n      setIsLoading(false)\r\n    }\r\n    fetchGroups()\r\n  }, [datasource])\r\n\r\n  /* ================================================== FETCH DEVICES ================================================== */\r\n  useEffect(() => {\r\n    async function fetchDevices() {\r\n      if (!group) {return};\r\n      \r\n      setIsLoading(true)\r\n      try {\r\n        const response = await datasource.getDevices(group)\r\n        if (response && Array.isArray(response.devices)) {\r\n          const filteredDevices = group ? response.devices.filter((device) => device.group === group) : response.devices\r\n\r\n          const deviceOptions = filteredDevices.map((device) => ({\r\n            label: device.device,\r\n            value: device.device.toString(),\r\n          }))\r\n          setLists((prev) => ({\r\n            ...prev,\r\n            devices: deviceOptions,\r\n          }))\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching devices:', error)\r\n      }\r\n      setIsLoading(false)\r\n    }\r\n    fetchDevices()\r\n  }, [datasource, group])\r\n\r\n  /* ================================================== FETCH SENSOR ================================================== */\r\n  useEffect(() => {\r\n    async function fetchSensors() {\r\n      if (!device) {return};\r\n\r\n      setIsLoading(true)\r\n      try {\r\n        const response = await datasource.getSensors(device)\r\n        if (response && Array.isArray(response.sensors)) {\r\n          const filteredSensors = device\r\n            ? response.sensors.filter((sensor) => sensor.device === device)\r\n            : response.sensors\r\n          const sensorOptions = filteredSensors.map((sensor) => ({\r\n            label: sensor.sensor,\r\n            value: sensor.sensor.toString(),\r\n          }))\r\n          setLists((prev) => ({\r\n            ...prev,\r\n            sensors: sensorOptions,\r\n          }))\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching sensors:', error)\r\n      }\r\n      setIsLoading(false)\r\n    }\r\n    fetchSensors()\r\n  }, [datasource, device])\r\n\r\n  /* ==================================================  FETCH CHANNEL ==================================================   */\r\n  useEffect(() => {\r\n    async function fetchChannels() {\r\n        if (!sensorId) {\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n        try {\r\n            const response = await datasource.getChannels(sensorId);\r\n            if (!response) {\r\n                console.error('Empty response received');\r\n                return;\r\n            }\r\n\r\n            const channelData = response.values[0] || {};\r\n\r\n            const channelOptions = Object.entries(channelData)\r\n                .filter(([key]) => key !== 'datetime')\r\n                .map(([key]) => ({\r\n                    label: key,\r\n                    value: key,\r\n                }));\r\n\r\n            setLists((prev) => ({\r\n                ...prev,\r\n                channels: channelOptions,\r\n            }));\r\n\r\n            if (query.channel && channelOptions.some(opt => opt.value === query.channel)) {\r\n                setChannel(query.channel);\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error('Error fetching channels:', error);\r\n        }\r\n        setIsLoading(false);\r\n    }\r\n\r\n    fetchChannels();\r\n}, [datasource, sensorId, query.channel]);\r\n\r\n  useEffect(() => {\r\n    if (isTextMode || isRawMode) {\r\n      const propertyOptions = propertyList.map((item) => ({\r\n        label: item.visible_name,\r\n        value: item.name,\r\n      }));\r\n\r\n      // Filter property options\r\n      const filterPropertyOptions = filterPropertyList.map((item) => ({\r\n        label: item.visible_name,\r\n        value: item.name,\r\n      }));\r\n\r\n      setLists((prev) => ({\r\n        ...prev,\r\n        properties: propertyOptions,\r\n        filterProperties: filterPropertyOptions,\r\n      }));\r\n    }\r\n  }, [isTextMode, isRawMode]);\r\n\r\n  /* ==================================================  INITIAL VALUES  ================================================== */\r\n useEffect(() => {\r\n    setGroup((prev) => query.group ?? prev);\r\n    setDevice((prev) => query.device ?? prev); \r\n    setSensor((prev) => query.sensor ?? prev);\r\n    setChannel((prev) => query.channel ?? prev);\r\n    setSensorId((prev) => query.sensorId ?? prev);\r\n    setManualMethod((prev) => query.manualMethod ?? prev);\r\n    setManualObjectId((prev) => query.manualObjectId ?? prev);\r\n    // Add this line to restore channel selections\r\n    setChannelQuery((prev) => query.channelArray || prev || []);\r\n  }, [query]);\r\n \r\n\r\n  /* ==================================================  FIND IDs ================================================= */\r\n  const findGroupId = useCallback(async (groupName: string) => {\r\n    try {\r\n      const response = await datasource.getGroups()\r\n      if (response && Array.isArray(response.groups)) {\r\n        const group = response.groups.find((g) => g.group === groupName)\r\n        if (group) {\r\n          return group.objid.toString()\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error finding group ID:', error)\r\n    }\r\n    return ''\r\n  }, [datasource])\r\n\r\n  const findDeviceId = useCallback(async (deviceName: string) => {\r\n    try {\r\n      const response = await datasource.getDevices(group)\r\n      if (response && Array.isArray(response.devices)) {\r\n        const device = response.devices.find((d) => d.device === deviceName)\r\n        if (device) {\r\n          return device.objid.toString()\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error finding device ID:', error)\r\n    }\r\n    return ''\r\n  }, [datasource, group])\r\n\r\n  const findSensorObjid = useCallback(async (sensorName: string) => {\r\n    try {\r\n      const response = await datasource.getSensors(device)\r\n      if (response && Array.isArray(response.sensors)) {\r\n        const sensor = response.sensors.find((s) => s.sensor === sensorName)\r\n        if (sensor) {\r\n          setSensorId(sensor.objid.toString())\r\n          return sensor.objid.toString()\r\n        } else {\r\n          console.error('Sensor not found:', sensorName)\r\n        }\r\n      } else {\r\n        console.error('Invalid response format:', response)\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching sensors:', error)\r\n    }\r\n    return ''\r\n  }, [datasource, device, setSensorId])\r\n  /* ==================================================  USE MEMO  ==================================================  */\r\n\r\n  const groupOptions = useMemo(() => lists.groups, [lists.groups]);\r\n  const deviceOptions = useMemo(() => lists.devices, [lists.devices]);\r\n  const sensorOptions = useMemo(() => lists.sensors, [lists.sensors]);\r\n\r\n  // Add new memoized selected values\r\n  const selectedGroup = useMemo(() => {\r\n    return groupOptions.find(option => option.value === group) || (group ? {label: group, value: group} : null);\r\n  }, [groupOptions, group]);\r\n\r\n  const selectedDevice = useMemo(() => {\r\n    return deviceOptions.find(option => option.value === device) || (device ? {label: device, value: device} : null);\r\n  }, [deviceOptions, device]);\r\n\r\n  const selectedSensor = useMemo(() => {\r\n    return sensorOptions.find(option => option.value === sensor) || (sensor ? {label: sensor, value: sensor} : null);\r\n  }, [sensorOptions, sensor]);\r\n\r\n  // Add new loadChannelOptions function with useMemo\r\n  const loadChannelOptions = useMemo(() => async () => {\r\n    if (!sensorId) {\r\n      return [];\r\n    }\r\n\r\n    try {\r\n      const response = await datasource.getChannels(sensorId);\r\n\r\n      if (!response) {\r\n        console.warn('No response received from getChannels');\r\n        return [];\r\n      }\r\n\r\n      // Check if response has the expected structure\r\n      if (typeof response === 'object' && 'values' in response) {\r\n        const values = response.values;\r\n        if (!Array.isArray(values) || values.length === 0) {\r\n          console.warn('No channel values found in response');\r\n          return [];\r\n        }\r\n\r\n        const channelData = values[0];\r\n        if (typeof channelData !== 'object') {\r\n          console.warn('Invalid channel data format');\r\n          return [];\r\n        }\r\n\r\n        return Object.keys(channelData)\r\n          .filter(key => key !== 'datetime')\r\n          .map(key => ({\r\n            label: key,\r\n            value: key,\r\n          }));\r\n      }\r\n\r\n      console.warn('Unexpected response format:', response);\r\n      return [];\r\n    } catch (error: any) {\r\n      console.error('Error loading channels:', error?.message || error);\r\n      return [];\r\n    }\r\n  }, [sensorId, datasource]);\r\n  /* ==================================================  EVENT HANDLERS ==================================================  */\r\n\r\n    /* ==================================================  QUERY  ==================================================  */\r\n\r\n  /* ==================================================  ONQUERYTYPESCHANGE ==================================================  */\r\n  const onQueryTypeChange = useCallback((value: SelectableValue<QueryType>) => {\r\n    onChange({ ...query, queryType: value.value! });\r\n    runQueryIfChanged();\r\n  }, [query, onChange, runQueryIfChanged]);\r\n\r\n  /* ==================================================  ONGROUPCHANGE ==================================================  */\r\n  const onGroupChange = useCallback(async (value: SelectableValue<string>) => {\r\n    const groupObjId = await findGroupId(value.value!)\r\n    setGroup(value.value!);\r\n    onChange({\r\n      ...query,\r\n      group: value.value!,\r\n      groupId: groupObjId,\r\n    });\r\n    setLists(prev => ({ ...prev, devices: [], sensors: [], channels: [] }));\r\n    runQueryIfChanged();\r\n  }, [query, onChange, runQueryIfChanged,  findGroupId]);\r\n\r\n\r\n  /* ==================================================  ONDEVICECHANGE ================================================= */\r\n  const onDeviceChange = useCallback(async (value: SelectableValue<string>) => {\r\n    const deviceObjId = await findDeviceId(value.value!)\r\n    \r\n    setDevice(value.value!);\r\n    onChange({\r\n      ...query,\r\n      device: value.value!,\r\n      deviceId: deviceObjId,\r\n    });\r\n    setLists(prev => ({ ...prev, sensors: [], channels: [] }));\r\n    runQueryIfChanged();\r\n  }, [query, onChange, runQueryIfChanged,  findDeviceId]);\r\n\r\n\r\n/* ==================================================  ONSENSORCHANGE ==================================================  */\r\n  const onSensorChange = useCallback(async (value: SelectableValue<string>) => {\r\n    if (!value.value) {\r\n      return;\r\n    }\r\n\r\n    const sensorObjId = await findSensorObjid(value.value);\r\n\r\n    setSensor(value.value);\r\n    setSensorId(sensorObjId);\r\n    setLists(prev => ({ ...prev, channels: [] }));\r\n\r\n    onChange({\r\n      ...query,\r\n      sensor: value.value,\r\n      sensorId: sensorObjId,\r\n    });\r\n    \r\n    runQueryIfChanged();\r\n  }, [query, onChange,  runQueryIfChanged,  findSensorObjid]);\r\n\r\n  /* ==================================================  ONCHANNELCHANGE ==================================================  */\r\n  const onChannelChange = useCallback((values: Array<SelectableValue<string>>) => {\r\n    const selectedChannels = values.map(v => v.value!);\r\n    \r\n    // Update both local state and query model\r\n    setChannelQuery(selectedChannels);\r\n    \r\n    // Ensure we store both value and label for each channel\r\n    onChange({\r\n      ...query,\r\n      channel: selectedChannels[0] || '',\r\n      channelArray: selectedChannels,\r\n    });\r\n    \r\n    runQueryIfChanged();\r\n  }, [query, onChange, runQueryIfChanged]);\r\n\r\n/* ==================================================  ONPROPERTYCHANGE ==================================================  */\r\nconst onPropertyChange = (value: SelectableValue<string>) => {\r\n  if (!value?.value) {return};\r\n  \r\n  onChange({ \r\n    ...query, \r\n    property: value.value,\r\n  });\r\n  runQueryIfChanged();\r\n};\r\n\r\n/* ==================================================  ON FILTER PROPERTY CHANGE ==================================================  */\r\nconst onFilterPropertyChange = (value: SelectableValue<string>) => {\r\n  if (!value?.value) {return};\r\n  \r\n  onChange({ \r\n    ...query, \r\n    filterProperty: value.value \r\n  });\r\n  runQueryIfChanged();\r\n};\r\n\r\n/* ==================================================  ON INCLUDE GROUP NAME ==================================================  */\r\nconst onIncludeGroupName = (event: ChangeEvent<HTMLInputElement>) => {\r\n  onChange({ ...query, includeGroupName: event.currentTarget.checked })\r\n  runQueryIfChanged()\r\n}\r\n\r\n\r\n/* ==================================================  ON INCLUDE DEVICE NAME ==================================================  */\r\nconst onIncludeDeviceName = (event: ChangeEvent<HTMLInputElement>) => {\r\n  onChange({ ...query, includeDeviceName: event.currentTarget.checked })\r\n  runQueryIfChanged()\r\n}\r\n\r\n\r\n/* ==================================================  ON INCLUDE SENSOR NAME ==================================================  */\r\nconst onIncludeSensorName = (event: ChangeEvent<HTMLInputElement>) => {\r\n  onChange({ ...query, includeSensorName: event.currentTarget.checked })\r\n  runQueryIfChanged()\r\n}\r\n\r\n/* ==================================================  ON MANUAL METHOD CHANGE ==================================================  */\r\nconst onManualMethodChange = (value: SelectableValue<string>) => {\r\n  setManualMethod(value.value!);\r\n  onChange({\r\n    ...query,\r\n    manualMethod: value.value,\r\n  });\r\n  runQueryIfChanged();\r\n};\r\n\r\n\r\n/* ==================================================  ON MANUAL OBJECT ID CHANGE ==================================================  */\r\nconst onManualObjectIdChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n  const value = event.currentTarget.value;\r\n  setManualObjectId(value);\r\n  onChange({\r\n    ...query,\r\n    manualObjectId: value,\r\n  });\r\n  runQueryIfChanged();\r\n};\r\n\r\n\r\n\r\n/* ================================================== DESTRUCTURING ================================================== */\r\n\r\n// Set default streaming values\r\nuseEffect(() => {\r\n  if (query.isStreaming === undefined) {\r\n    onChange({\r\n      ...query,\r\n      isStreaming: false,\r\n      streamInterval: 2500, // Default interval 5ms (2,5 seconds)\r\n    });\r\n  }\r\n}, [query, onChange]);\r\n\r\n// Streaming section with backend integration\r\nconst renderStreamingOptions = () => (\r\n  <FieldSet label=\"Streaming Options\">\r\n    <Stack direction=\"row\" gap={1}>\r\n      <InlineField label=\"Enable Streaming\" labelWidth={16}>\r\n        <InlineSwitch \r\n          id='query-editor-is-stream'\r\n          value={query.isStreaming || false}\r\n          onChange={(e) => {\r\n            const isStreaming = e.currentTarget.checked;\r\n            const streamInterval = isStreaming ? (query.streamInterval || 2500) : undefined;\r\n            onChange({ \r\n              ...query, \r\n              isStreaming,\r\n              streamInterval,\r\n            });\r\n            // Run query to update backend state\r\n            runQueryIfChanged();\r\n          }} \r\n        />\r\n      </InlineField>\r\n      {query.isStreaming && (\r\n        <InlineField label=\"Update Interval (ms)\" labelWidth={20} tooltip=\"Refresh interval in milliseconds\">\r\n          <Input\r\n            id='query-editor-stream-interval'\r\n            type=\"number\"\r\n            value={query.streamInterval || 2500}\r\n            onChange={(e) => {\r\n              const interval = Math.max(0, Math.min(60000, parseInt(e.currentTarget.value, 10) || 2500));\r\n              onChange({\r\n                ...query,\r\n                streamInterval: interval,\r\n              });\r\n              // Run query to update backend state\r\n              runQueryIfChanged();\r\n            }}\r\n            placeholder=\"2500\"\r\n            min={0}\r\n            max={60000}\r\n          />\r\n        </InlineField>\r\n      )}\r\n    </Stack>\r\n  </FieldSet>\r\n);\r\n\r\n/* ================================================== RENDER ================================================== */\r\nreturn (\r\n  <Stack direction=\"column\" gap={2}>\r\n    <Stack direction=\"row\" gap={2}>\r\n      <Stack direction=\"column\" gap={1}>\r\n        <InlineField label=\"Query Type\" labelWidth={20} grow>\r\n          <Select\r\n            id='query-editor-queryType'\r\n            options={queryTypeOptions}\r\n            value={query.queryType}\r\n            onChange={onQueryTypeChange}\r\n            width={47}\r\n          />\r\n        </InlineField>\r\n\r\n        <InlineField label=\"Group\" labelWidth={20} grow>\r\n          <Select\r\n            id='query-editor-group'\r\n            isLoading={isLoading}\r\n            options={groupOptions}\r\n            value={selectedGroup}\r\n            onChange={onGroupChange}\r\n            width={47}\r\n            allowCustomValue\r\n            isClearable\r\n            isDisabled={!query.queryType}\r\n            placeholder=\"Select Group or type '*'\"\r\n          />\r\n        </InlineField>\r\n\r\n        <InlineField label=\"Device\" labelWidth={20} grow>\r\n          <Select\r\n            id='query-editor-device'\r\n            isLoading={!lists.devices.length}\r\n            options={deviceOptions}\r\n            value={selectedDevice}\r\n            onChange={onDeviceChange}\r\n            width={47}\r\n            allowCustomValue\r\n            isClearable\r\n            isDisabled={!query.group}\r\n            placeholder=\"Select Device or type '*'\"\r\n          />\r\n        </InlineField>\r\n      </Stack>\r\n\r\n      <Stack direction=\"column\" gap={1}>\r\n        <InlineField label=\"Sensor\" labelWidth={20} grow>\r\n          <Select\r\n            id='query-editor-sensor'\r\n            isLoading={!lists.sensors.length}\r\n            options={sensorOptions}\r\n            value={selectedSensor}\r\n            onChange={onSensorChange}\r\n            \r\n            width={47}\r\n            allowCustomValue\r\n            placeholder=\"Select Sensor or type '*'\"\r\n            isClearable\r\n            isDisabled={!query.device}\r\n          />\r\n        </InlineField>\r\n        <InlineField label=\"Channel\" labelWidth={20} grow>\r\n          <AsyncMultiSelect\r\n            id='query-editor-channel'\r\n            key={sensorId}\r\n            loadOptions={loadChannelOptions}\r\n            defaultOptions={true}\r\n            value={channelQuery.map(c => ({ \r\n              label: c, \r\n              value: c,\r\n            }))}\r\n            onChange={onChannelChange}\r\n            width={47}\r\n            placeholder={sensorId ? \"Select Channel\" : \"First select a sensor\"}\r\n            isClearable\r\n            isDisabled={!sensorId}\r\n          />\r\n        </InlineField>\r\n      </Stack>\r\n    </Stack>\r\n   \r\n\r\n    {/* Show display name options for both Metrics and Streaming */}\r\n    {(isMetricsMode || query.isStreaming) && (\r\n      <FieldSet label=\"Display Options\">\r\n        <Stack direction=\"row\" gap={1}>\r\n          <InlineField  label=\"Include Group\" labelWidth={16}>\r\n            <InlineSwitch id='query-editor-include-group' value={query.includeGroupName || false} onChange={onIncludeGroupName} />\r\n          </InlineField>\r\n          <InlineField label=\"Include Device\" labelWidth={15}>\r\n            <InlineSwitch id='query-editor-include-device' value={query.includeDeviceName || false} onChange={onIncludeDeviceName} />\r\n          </InlineField>\r\n          <InlineField label=\"Include Sensor\" labelWidth={15}>\r\n            <InlineSwitch id='query-editor-include-sensor' value={query.includeSensorName || false} onChange={onIncludeSensorName} />\r\n          </InlineField>\r\n        </Stack>\r\n      </FieldSet>\r\n    )}\r\n\r\n    {/* Options for Text and Raw modes */}\r\n    {(isTextMode || isRawMode) && (\r\n      <FieldSet label=\"Options\">\r\n        <Stack direction=\"row\" gap={2}>\r\n          <InlineField label=\"Property\" labelWidth={16} tooltip=\"Select property type\">\r\n            <Select\r\n              id='query-editor-property'\r\n              options={lists.properties}\r\n              value={query.property}\r\n              onChange={onPropertyChange}\r\n              width={32}\r\n              placeholder=\"Select property\"\r\n              isClearable={false}\r\n            />\r\n          </InlineField>\r\n          <InlineField label=\"Filter Property\" labelWidth={16} tooltip=\"Select filter property\">\r\n            <Select\r\n              id='query-editor-filterProperty'\r\n              options={lists.filterProperties}\r\n              value={query.filterProperty}\r\n              onChange={onFilterPropertyChange}\r\n              width={32}\r\n              placeholder=\"Select filter\"\r\n              isClearable={false}\r\n            />\r\n          </InlineField>\r\n        </Stack>\r\n      </FieldSet>\r\n    )}\r\n\r\n    {/* Manual API Query Section */}\r\n    {isManualMode && (\r\n      <FieldSet label=\"Manual API Query\">\r\n        <Stack direction=\"row\" gap={2}>\r\n          <InlineField label=\"API Method\" labelWidth={16} tooltip=\"Select or enter a custom PRTG API endpoint\">\r\n            <Select\r\n              id='query-editor-manualMethod'\r\n              options={manualApiMethods}\r\n              value={manualMethod}\r\n              onChange={onManualMethodChange}\r\n              width={32}\r\n              placeholder=\"Select or enter API method\"\r\n              allowCustomValue={true}\r\n              onCreateOption={(customValue) => {\r\n                setManualMethod(customValue);\r\n                onChange({\r\n                  ...query,\r\n                  manualMethod: customValue,\r\n                });\r\n                runQueryIfChanged();\r\n              }}\r\n              isClearable\r\n            />\r\n          </InlineField>\r\n          <InlineField label=\"Object ID\" labelWidth={16} tooltip=\"Object ID from selected sensor\">\r\n            <Input\r\n              id='query-editor-manualObjectId'\r\n              value={manualObjectId || sensorId}\r\n              onChange={onManualObjectIdChange}\r\n              placeholder=\"Automatically filled from sensor\"\r\n              width={32}\r\n              type=\"text\"\r\n              disabled={!!sensorId}\r\n            />\r\n          </InlineField>\r\n        </Stack>\r\n      </FieldSet>\r\n    )}\r\n\r\n    {/* Always show streaming options */}\r\n    {renderStreamingOptions()}\r\n\r\n  </Stack>\r\n)\r\n}\r\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__7__","__WEBPACK_EXTERNAL_MODULE__241__","__WEBPACK_EXTERNAL_MODULE__269__","__WEBPACK_EXTERNAL_MODULE__308__","__WEBPACK_EXTERNAL_MODULE__531__","__WEBPACK_EXTERNAL_MODULE__781__","__WEBPACK_EXTERNAL_MODULE__959__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","p","slice","lastIndexOf","QueryType","manualApiMethods","label","description","queryTypeOptions","keys","map","filterPropertyList","name","visible_name","propertyList","timezoneOptions","DataSource","DataSourceWithBackend","applyTemplateVariables","query","scopedVars","replaced","getTemplateSrv","replace","channel","filterQuery","this","getResource","getDevices","group","Error","encodeURIComponent","getSensors","device","getChannels","sensorId","request","observables","targets","isStreaming","streamPath","channelArray","join","streamInterval","getGrafanaLiveSrv","getDataStream","addr","scope","LiveChannelScope","namespace","uid","path","data","channels","interval","sensor","from","super","merge","getSupportedSupplementaryQueryTypes","SupplementaryQueryType","LogsSample","getSupplementaryQuery","options","includes","type","refId","queryType","Logs","logLevel","logMessage","getSupplementaryRequest","logsSampleOption","getLogsSampleDataProvider","logsSampleRequest","cloneDeep","limit","filter","length","intervalMs","maxDataPoints","constructor","instanceSettings","cacheTimeOut","annotations","QueryEditor","processEvents","anno","events","sourceQuery","target","forEach","frame","timeField","fields","find","field","valueField","firstTime","values","lastTime","firstValue","panelId","source","event","time","timeEnd","title","text","tags","push","jsonData","cacheTime","plugin","DataSourcePlugin","setConfigEditor","props","onOptionsChange","secureJsonFields","secureJsonData","InlineField","labelWidth","interactive","tooltip","Input","id","onChange","placeholder","width","SecretInput","required","isConfigured","apiKey","onReset","parseInt","Select","timezone","selectedOption","setQueryEditor","onRunQuery","datasource","prevQueryRef","useRef","runQueryIfChanged","useCallback","JSON","stringify","current","isMetricsMode","Metrics","isRawMode","Raw","isTextMode","Text","isManualMode","Manual","setGroup","useState","setDevice","setSensor","setChannel","channelQuery","setChannelQuery","setSensorId","manualMethod","setManualMethod","manualObjectId","setManualObjectId","lists","setLists","groups","devices","sensors","properties","filterProperties","isLoading","setIsLoading","sort","b","localeCompare","useEffect","response","getGroups","Array","isArray","groupOptions","toString","prev","console","error","filteredDevices","deviceOptions","filteredSensors","sensorOptions","channelData","channelOptions","entries","some","opt","propertyOptions","item","filterPropertyOptions","findGroupId","groupName","g","objid","findDeviceId","deviceName","findSensorObjid","sensorName","s","useMemo","selectedGroup","option","selectedDevice","selectedSensor","loadChannelOptions","warn","message","onQueryTypeChange","onGroupChange","groupObjId","groupId","onDeviceChange","deviceObjId","deviceId","onSensorChange","sensorObjId","onChannelChange","selectedChannels","v","Stack","direction","gap","grow","allowCustomValue","isClearable","isDisabled","AsyncMultiSelect","loadOptions","defaultOptions","c","FieldSet","InlineSwitch","includeGroupName","currentTarget","checked","includeDeviceName","includeSensorName","property","filterProperty","onCreateOption","customValue","disabled","e","Math","max","min"],"sourceRoot":""}