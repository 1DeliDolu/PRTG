{"version":3,"file":"module.js","mappings":"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","sources":["webpack://maxmarkusprogram-prtg-datasource/external amd \"@grafana/data\"","webpack://maxmarkusprogram-prtg-datasource/external amd \"@grafana/runtime\"","webpack://maxmarkusprogram-prtg-datasource/external amd \"@grafana/ui\"","webpack://maxmarkusprogram-prtg-datasource/external amd \"module\"","webpack://maxmarkusprogram-prtg-datasource/external amd \"react\"","webpack://maxmarkusprogram-prtg-datasource/webpack/bootstrap","webpack://maxmarkusprogram-prtg-datasource/webpack/runtime/compat get default export","webpack://maxmarkusprogram-prtg-datasource/webpack/runtime/define property getters","webpack://maxmarkusprogram-prtg-datasource/webpack/runtime/hasOwnProperty shorthand","webpack://maxmarkusprogram-prtg-datasource/webpack/runtime/make namespace object","webpack://maxmarkusprogram-prtg-datasource/webpack/runtime/publicPath","webpack://maxmarkusprogram-prtg-datasource/./node_modules/grafana-public-path.js","webpack://maxmarkusprogram-prtg-datasource/./datasource.ts","webpack://maxmarkusprogram-prtg-datasource/./types.ts","webpack://maxmarkusprogram-prtg-datasource/./module.ts","webpack://maxmarkusprogram-prtg-datasource/./components/ConfigEditor.tsx","webpack://maxmarkusprogram-prtg-datasource/./components/QueryEditor.tsx"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__781__;","module.exports = __WEBPACK_EXTERNAL_MODULE__531__;","module.exports = __WEBPACK_EXTERNAL_MODULE__7__;","module.exports = __WEBPACK_EXTERNAL_MODULE__308__;","module.exports = __WEBPACK_EXTERNAL_MODULE__959__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"public/plugins/maxmarkusprogram-prtg-datasource/\";","\nimport amdMetaModule from 'amd-module';\n\n__webpack_public_path__ =\n  amdMetaModule && amdMetaModule.uri\n    ? amdMetaModule.uri.slice(0, amdMetaModule.uri.lastIndexOf('/') + 1)\n    : 'public/plugins/maxmarkusprogram-prtg-datasource/';\n","import { AnnotationQuery, AnnotationSupport, DataSourceInstanceSettings, ScopedVars } from '@grafana/data'\r\nimport { DataSourceWithBackend, getTemplateSrv } from '@grafana/runtime'\r\nimport {\r\n  MyQuery,\r\n  MyDataSourceOptions,\r\n  PRTGGroupListResponse,\r\n  PRTGDeviceListResponse,\r\n  PRTGSensorListResponse,\r\n  PRTGChannelListResponse,\r\n} from './types'\r\n\r\nexport class DataSource extends DataSourceWithBackend<MyQuery, MyDataSourceOptions> {\r\n  constructor(instanceSettings: DataSourceInstanceSettings<MyDataSourceOptions>) {\r\n    super(instanceSettings)\r\n  }\r\n\r\n  applyTemplateVariables(query: MyQuery, scopedVars: ScopedVars) {\r\n    return {\r\n      ...query,\r\n      channel: getTemplateSrv().replace(query.channel, scopedVars),\r\n    }\r\n  }\r\n\r\n  filterQuery(query: MyQuery): boolean {\r\n    // if no query has been provided, prevent the query from being executed\r\n    return !!query.channel\r\n  }\r\n\r\n  async getGroups(): Promise<PRTGGroupListResponse> {\r\n    return this.getResource('groups')\r\n  }\r\n\r\n  async getDevices(group: string): Promise<PRTGDeviceListResponse> {\r\n    if (!group) {\r\n      throw new Error('group is required')\r\n    }\r\n    // Change this line to use path parameter instead of query parameter\r\n    return this.getResource(`devices/${encodeURIComponent(group)}`)\r\n  }\r\n\r\n  async getSensors(device: string): Promise<PRTGSensorListResponse> {\r\n    if (!device) {\r\n      throw new Error('device is required');\r\n    }\r\n    // Change to use path parameter instead of query parameter\r\n    return this.getResource(`sensors/${encodeURIComponent(device)}`);\r\n  }\r\n\r\n  async getChannels(objid: string): Promise<PRTGChannelListResponse> {\r\n    if (!objid) {\r\n      throw new Error('objid is required')\r\n    }\r\n    return this.getResource(`channels/${objid}`)\r\n  }\r\n  annotations?: AnnotationSupport<MyQuery, AnnotationQuery<MyQuery>> | undefined\r\n}\r\n","import { DataSourceJsonData } from '@grafana/data';\r\nimport { DataQuery } from '@grafana/schema';\r\n\r\nexport enum QueryType {\r\n  Metrics = 'metrics',\r\n  Raw = 'raw',\r\n  Text = 'text',\r\n  Selbts = 'selbts'\r\n}\r\n\r\nexport interface MyQuery extends DataQuery {\r\n  queryType: QueryType;\r\n  group: string;\r\n  groupId: string;\r\n  device: string;\r\n  deviceId: string;\r\n  sensor: string;\r\n  sensorId: string;\r\n  channel: string;\r\n  channels: string[];\r\n  property?: string;\r\n  filterProperty?: string;\r\n  includeGroupName?: boolean;\r\n  includeDeviceName?: boolean;\r\n  includeSensorName?: boolean;\r\n}\r\n\r\nexport interface DataPoint {\r\n  Time: number;\r\n  Value: number | string;\r\n}\r\n\r\nexport interface DataSourceResponse {\r\n  datapoints: DataPoint[];\r\n}\r\n\r\n/**\r\n * These are options configured for each DataSource instance\r\n */\r\nexport interface MyDataSourceOptions extends DataSourceJsonData {\r\n  path?: string;\r\n  cacheTime?: number;\r\n}\r\n\r\nexport interface MySecureJsonData {\r\n  apiKey?: string;\r\n}\r\n\r\n\r\n/* ################################### QUERY TYPE OPTION ###################################### */\r\nexport interface QueryTypeOptions {\r\n  label: string;\r\n  value: QueryType;\r\n}\r\n\r\nexport const queryTypeOptions = Object.keys(QueryType).map((key) => ({\r\n  label: key,\r\n  value: QueryType[key as keyof typeof QueryType],\r\n}));\r\n\r\nexport interface ListItem {\r\n  name: string;\r\n  visible_name: string;\r\n}\r\n\r\n/* ################################### PRTG ITEMS ###################################### */\r\nexport interface PRTGItem {\r\n  active: boolean;\r\n  active_raw: number;\r\n  channel: string;\r\n  channel_raw: string;\r\n  datetime: string;\r\n  datetime_raw: number;\r\n  device: string;\r\n  device_raw: string;\r\n  group: string;\r\n  group_raw: string;\r\n  message: string;\r\n  message_raw: string;\r\n  objid: number;\r\n  objid_raw: number;\r\n  priority: string;\r\n  priority_raw: number;\r\n  sensor: string;\r\n  sensor_raw: string;\r\n  status: string;\r\n  status_raw: number;\r\n  tags: string;\r\n  tags_raw: string;\r\n  \r\n}\r\n\r\nexport interface PRTGGroupListResponse {\r\n  prtgversion: string;\r\n  treesize: number;\r\n  groups: PRTGItem[];\r\n}\r\n\r\nexport interface PRTGGroupResponse {\r\n  groups: PRTGItem[];\r\n}\r\n\r\nexport interface PRTGDeviceListResponse {\r\n  prtgversion: string;\r\n  treesize: number;\r\n  devices: PRTGItem[];\r\n}\r\n\r\nexport interface PRTGDeviceResponse {\r\n  devices: PRTGItem[];\r\n}\r\n\r\nexport interface PRTGSensorListResponse {\r\n  prtgversion: string;\r\n  treesize: number;\r\n  sensors: PRTGItem[];\r\n}\r\n\r\nexport interface PRTGSensorResponse {\r\n  sensors: PRTGItem[];\r\n}\r\n\r\nexport interface PRTGChannelListResponse {\r\n  prtgversion: string;\r\n  treesize: number;\r\n  values: PRTGItemChannel[];\r\n}\r\n\r\nexport interface PRTGItemChannel {\r\n  [key: string]: number | string;\r\n  datetime: string;\r\n}\r\n\r\n/* ################################### Propert an filter prpoerty ################################################## */\r\n\r\nexport const filterPropertyList = [\r\n  { name: 'active', visible_name: 'Active' },\r\n  { name: 'message_raw', visible_name: 'Message' },\r\n  { name: 'priority', visible_name: 'Priority' },\r\n  { name: 'status', visible_name: 'Status' },\r\n  { name: 'tags', visible_name: 'Tags' },\r\n] as const;\r\n\r\nexport type FilterPropertyItem = typeof filterPropertyList[number];\r\n\r\nexport interface FilterPropertyOption {\r\n  label: string;\r\n  value: FilterPropertyItem['name'];\r\n}\r\n\r\nexport const propertyList = [\r\n  { name: 'group', visible_name: 'Group' },\r\n  { name: 'device', visible_name: 'Device' },\r\n  { name: 'sensor', visible_name: 'Sensor' },\r\n] as const;\r\n\r\nexport type PropertyItem = typeof propertyList[number];\r\n\r\nexport interface PropertyOption {\r\n  label: string;\r\n  value: PropertyItem['name'];\r\n}\r\n\r\n\r\n/* ################################################## Query Selbst ################################################### */\r\n\r\n\r\n\r\n","import { DataSourcePlugin } from '@grafana/data';\r\nimport { DataSource } from './datasource';\r\nimport { ConfigEditor } from './components/ConfigEditor';\r\nimport { QueryEditor } from './components/QueryEditor';\r\nimport { MyQuery, MyDataSourceOptions, MySecureJsonData } from './types';\r\n\r\nexport const plugin = new DataSourcePlugin<DataSource, MyQuery, MyDataSourceOptions,MySecureJsonData>(DataSource)\r\n  .setConfigEditor(ConfigEditor)\r\n  .setQueryEditor(QueryEditor);\r\n","import React, { ChangeEvent } from 'react';\r\nimport { InlineField, Input, SecretInput } from '@grafana/ui';\r\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\r\nimport { MyDataSourceOptions, MySecureJsonData } from '../types';\r\n\r\ninterface Props extends DataSourcePluginOptionsEditorProps<MyDataSourceOptions, MySecureJsonData> {}\r\n\r\nexport function ConfigEditor(props: Props) {\r\n  const { onOptionsChange, options } = props;\r\n  const { jsonData, secureJsonFields, secureJsonData } = options;\r\n\r\n  const onPathChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    onOptionsChange({\r\n      ...options,\r\n      jsonData: {\r\n        ...jsonData,\r\n        path: event.target.value,\r\n      },\r\n    });\r\n  };\r\n\r\n  // Secure field (only sent to the backend)\r\n  const onAPIKeyChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    onOptionsChange({\r\n      ...options,\r\n      secureJsonData: {\r\n        apiKey: event.target.value,\r\n      },\r\n    });\r\n  };\r\n\r\n  const onResetAPIKey = () => {\r\n    onOptionsChange({\r\n      ...options,\r\n      secureJsonFields: {\r\n        ...options.secureJsonFields,\r\n        apiKey: false,\r\n      },\r\n      secureJsonData: {\r\n        ...options.secureJsonData,\r\n        apiKey: '',\r\n      },\r\n    });\r\n  };\r\n  // cachetime \r\n  const onCacheTimeChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    onOptionsChange({\r\n      ...options,\r\n      jsonData: {\r\n        ...jsonData,\r\n        cacheTime: parseInt(event.target.value, 10),\r\n      },\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <InlineField label=\"Path\" labelWidth={14} interactive tooltip={'Json field returned to frontend'}>\r\n        <Input\r\n          id=\"config-editor-path\"\r\n          onChange={onPathChange}\r\n          value={jsonData.path}\r\n          placeholder=\"Enter the path, <your.prtg.server> without https://\"\r\n          width={60}\r\n        />\r\n      </InlineField>\r\n      <InlineField label=\"API Key\" labelWidth={14} interactive tooltip={'Secure json field (backend only)'}>\r\n        <SecretInput\r\n          required\r\n          id=\"config-editor-api-key\"\r\n          isConfigured={secureJsonFields.apiKey}\r\n          value={secureJsonData?.apiKey}\r\n          placeholder=\"Enter your API key\"\r\n          width={60}\r\n          onReset={onResetAPIKey}\r\n          onChange={onAPIKeyChange}\r\n        />\r\n      </InlineField>\r\n      <InlineField label=\"Cache Time\" labelWidth={14} interactive tooltip={'Cache time in seconds'}>\r\n        <Input\r\n          id=\"config-editor-cache-time\"\r\n          onChange={onCacheTimeChange}\r\n          value={jsonData.cacheTime}\r\n          placeholder=\"Enter the cache time\"\r\n          width={60}\r\n        />\r\n      </InlineField>\r\n    </>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { InlineField, Select, Stack, FieldSet, InlineSwitch } from '@grafana/ui'\r\nimport { QueryEditorProps, SelectableValue } from '@grafana/data'\r\nimport { DataSource } from '../datasource'\r\nimport { MyDataSourceOptions, MyQuery, queryTypeOptions, QueryType, propertyList, filterPropertyList } from '../types'\r\n\r\ntype Props = QueryEditorProps<DataSource, MyQuery, MyDataSourceOptions>\r\n\r\nexport function QueryEditor({ query, onChange, onRunQuery, datasource }: Props) {\r\n  const isMetricsMode = query.queryType === QueryType.Metrics\r\n  const isRawMode = query.queryType === QueryType.Raw\r\n  const isTextMode = query.queryType === QueryType.Text\r\n\r\n  const [group, setGroup] = useState<string>('')\r\n  const [device, setDevice] = useState<string>('')\r\n  //@ts-ignore\r\n  const [sensor, setSensor] = useState<string>('')\r\n  //@ts-ignore\r\n  const [channel, setChannel] = useState<string[]>([])\r\n  const [sensorId, setSensorId] = useState<string>('')\r\n\r\n  const [lists, setLists] = useState({\r\n    groups: [] as Array<SelectableValue<string>>,\r\n    devices: [] as Array<SelectableValue<string>>,\r\n    sensors: [] as Array<SelectableValue<string>>,\r\n    channels: [] as Array<SelectableValue<string>>,\r\n    values: [] as Array<SelectableValue<string>>,\r\n    properties: [] as Array<SelectableValue<string>>,\r\n    filterProperties: [] as Array<SelectableValue<string>>,\r\n  })\r\n\r\n  const [isLoading, setIsLoading] = useState(false)\r\n//@ts-ignore\r\n  const [groupId, setGroupId] = useState<string>('')\r\n//@ts-ignore\r\n  const [deviceId, setDeviceId] = useState<string>('')\r\n\r\n\r\n  /* ############################################## FETCH GROUPS ####################################### */\r\n  useEffect(() => {\r\n    async function fetchGroups() {\r\n      setIsLoading(true)\r\n      try {\r\n        const response = await datasource.getGroups()\r\n        if (response && Array.isArray(response.groups)) {\r\n          const groupOptions = response.groups.map((group) => ({\r\n            label: group.group,\r\n            value: group.group.toString(),\r\n          }))\r\n          setLists((prev) => ({\r\n            ...prev,\r\n            groups: groupOptions,\r\n          }))\r\n        } else {\r\n          console.error('Invalid response format:', response)\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching groups:', error)\r\n      }\r\n      setIsLoading(false)\r\n    }\r\n    fetchGroups()\r\n  }, [datasource])\r\n\r\n  /* ########################################### FETCH DEVICES ####################################### */\r\n  useEffect(() => {\r\n    async function fetchDevices() {\r\n      setIsLoading(true)\r\n      try {\r\n        const response = await datasource.getDevices(group)\r\n        if (response && Array.isArray(response.devices)) {\r\n          const filteredDevices = group ? response.devices.filter((device) => device.group === group) : response.devices\r\n\r\n          const deviceOptions = filteredDevices.map((device) => ({\r\n            label: device.device,\r\n            value: device.device.toString(),\r\n          }))\r\n          setLists((prev) => ({\r\n            ...prev,\r\n            devices: deviceOptions,\r\n          }))\r\n        } else {\r\n          console.error('Invalid response format:', response)\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching devices:', error)\r\n      }\r\n      setIsLoading(false)\r\n    }\r\n    fetchDevices()\r\n  }, [datasource, group])\r\n\r\n  /* ######################################## FETCH SENSOR ############################################### */\r\n  useEffect(() => {\r\n    async function fetchSensors() {\r\n      setIsLoading(true)\r\n      try {\r\n        const response = await datasource.getSensors(device)\r\n        if (response && Array.isArray(response.sensors)) {\r\n          const filteredSensors = device\r\n            ? response.sensors.filter((sensor) => sensor.device === device)\r\n            : response.sensors\r\n          const sensorOptions = filteredSensors.map((sensor) => ({\r\n            label: sensor.sensor,\r\n            value: sensor.sensor.toString(),\r\n          }))\r\n          setLists((prev) => ({\r\n            ...prev,\r\n            sensors: sensorOptions,\r\n          }))\r\n        } else {\r\n          console.error('Invalid response format:', response)\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching sensors:', error)\r\n      }\r\n      setIsLoading(false)\r\n    }\r\n    fetchSensors()\r\n  }, [datasource, device])\r\n\r\n  /* ####################################### FETCH CHANNEL ############################################# */\r\n\r\n  useEffect(() => {\r\n    async function fetchChannels() {\r\n      if (!sensorId) {\r\n        return\r\n      }\r\n\r\n      setIsLoading(true)\r\n      try {\r\n        const response = await datasource.getChannels(sensorId)\r\n\r\n        // Check if response is empty\r\n        if (!response) {\r\n          console.error('Empty response received')\r\n          setLists((prev) => ({\r\n            ...prev,\r\n            channels: [],\r\n          }))\r\n          return\r\n        }\r\n\r\n        if (typeof response !== 'object') {\r\n          console.error('Invalid response format:', response)\r\n          return\r\n        }\r\n\r\n        if ('error' in response) {\r\n          console.error('API Error:', response.error)\r\n          return\r\n        }\r\n\r\n        if (!Array.isArray(response.values)) {\r\n          console.error('Invalid channels format:', response)\r\n          return\r\n        }\r\n\r\n        const channelOptions = Object.keys(response.values[0] || {})\r\n          .filter((key) => key !== 'datetime')\r\n          .map((key) => ({\r\n            label: key,\r\n            value: key,\r\n          }))\r\n\r\n        setLists((prev) => ({\r\n          ...prev,\r\n          channels: channelOptions,\r\n        }))\r\n      } catch (error) {\r\n        console.error('Error fetching channels:', error)\r\n        setLists((prev) => ({\r\n          ...prev,\r\n          channels: [],\r\n        }))\r\n      }\r\n      setIsLoading(false)\r\n    }\r\n\r\n    if (sensorId) {\r\n      fetchChannels()\r\n    }\r\n  }, [datasource, sensorId])\r\n\r\n  useEffect(() => {\r\n    if (isTextMode || isRawMode) {\r\n      const propertyOptions: Array<SelectableValue<string>> = propertyList.map((item) => ({\r\n        label: item.visible_name,\r\n        value: item.name,\r\n      }))\r\n\r\n      const filterPropertyOptions: Array<SelectableValue<string>> = filterPropertyList.map((item) => ({\r\n        label: item.visible_name,\r\n        value: item.name,\r\n      }))\r\n\r\n      setLists((prev) => ({\r\n        ...prev,\r\n        properties: propertyOptions,\r\n        filterProperties: filterPropertyOptions,\r\n      }))\r\n    }\r\n  }, [isTextMode, isRawMode])\r\n\r\n  /* ######################################## QUERY  ############################################### */\r\n\r\n  const onQueryTypeChange = (value: SelectableValue<QueryType>) => {\r\n    // Mevcut query'nin diğer değerlerini koruyarak sadece tipini değiştir\r\n    onChange({\r\n      ...query,\r\n      queryType: value.value!,\r\n    })\r\n    onRunQuery()\r\n  }\r\n\r\n  const findGroupId = async (groupName: string) => {\r\n    try {\r\n      const response = await datasource.getGroups()\r\n      if (response && Array.isArray(response.groups)) {\r\n        const group = response.groups.find((g) => g.group === groupName)\r\n        if (group) {\r\n          return group.objid.toString()\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error finding group ID:', error)\r\n    }\r\n    return ''\r\n  }\r\n\r\n  const findDeviceId = async (deviceName: string) => {\r\n    try {\r\n      const response = await datasource.getDevices(group)\r\n      if (response && Array.isArray(response.devices)) {\r\n        const device = response.devices.find((d) => d.device === deviceName)\r\n        if (device) {\r\n          return device.objid.toString()\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error finding device ID:', error)\r\n    }\r\n    return ''\r\n  }\r\n\r\n  const onGroupChange = async (value: SelectableValue<string>) => {\r\n    const groupObjId = await findGroupId(value.value!)\r\n    \r\n    onChange({\r\n      ...query,\r\n      group: value.value!,\r\n      groupId: groupObjId,\r\n      device: '',\r\n      deviceId: '',\r\n      sensor: '',\r\n      sensorId: '',\r\n      channel: '',\r\n    })\r\n\r\n    setGroup(value.value!)\r\n    setGroupId(groupObjId)\r\n    setDevice('')\r\n    setDeviceId('')\r\n    setSensor('')\r\n    setSensorId('')\r\n    setChannel([])\r\n\r\n    setLists((prev) => ({\r\n      ...prev,\r\n      devices: [],\r\n      sensors: [],\r\n      channels: [],\r\n    }))\r\n    onRunQuery()\r\n  }\r\n\r\n  const onDeviceChange = async (value: SelectableValue<string>) => {\r\n    const deviceObjId = await findDeviceId(value.value!)\r\n\r\n    onChange({\r\n      ...query,\r\n      device: value.value!,\r\n      deviceId: deviceObjId,\r\n      sensor: '',\r\n      sensorId: '',\r\n      channel: '',\r\n    })\r\n\r\n    setDevice(value.value!)\r\n    setDeviceId(deviceObjId)\r\n    setSensor('')\r\n    setSensorId('')\r\n    setChannel([])\r\n\r\n    setLists((prev) => ({\r\n      ...prev,\r\n      sensors: [],\r\n      channels: [],\r\n    }))\r\n    onRunQuery()\r\n  }\r\n\r\n  const findSensorObjid = async (sensorName: string) => {\r\n    try {\r\n      const response = await datasource.getSensors(device)\r\n      if (response && Array.isArray(response.sensors)) {\r\n        const sensor = response.sensors.find((s) => s.sensor === sensorName)\r\n        if (sensor) {\r\n          setSensorId(sensor.objid.toString())\r\n          return sensor.objid.toString()\r\n        } else {\r\n          console.error('Sensor not found:', sensorName)\r\n        }\r\n      } else {\r\n        console.error('Invalid response format:', response)\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching sensors:', error)\r\n    }\r\n    return ''\r\n  }\r\n\r\n  const onSensorChange = async (value: SelectableValue<string>) => {\r\n    const sensorObjId = await findSensorObjid(value.value!)\r\n\r\n    if (isMetricsMode) {\r\n      onChange({\r\n        ...query,\r\n        sensor: value.value!,\r\n        sensorId: sensorObjId,\r\n        channel: '',\r\n      })\r\n      setChannel([])\r\n    } else {\r\n      onChange({\r\n        ...query,\r\n        sensor: value.value!,\r\n        sensorId: sensorObjId,\r\n      })\r\n    }\r\n\r\n    setSensor(value.value!)\r\n    setSensorId(sensorObjId)\r\n\r\n    if (isMetricsMode) {\r\n      setLists((prev) => ({\r\n        ...prev,\r\n        channels: [],\r\n      }))\r\n    }\r\n    onRunQuery()\r\n  }\r\n\r\n  const onChannelChange = (value: SelectableValue<string> | Array<SelectableValue<string>>) => {\r\n    const selectedChannels = Array.isArray(value) ? value.map(v => v.value || '') : [];\r\n    onChange({\r\n      ...query,\r\n      channels: selectedChannels,\r\n      channel: selectedChannels[0] || '',\r\n    });\r\n\r\n    setChannel(selectedChannels);\r\n    onRunQuery();\r\n  };\r\n\r\n  const onPropertyChange = (value: SelectableValue<string>) => {\r\n    onChange({ ...query, property: value.value! })\r\n    onRunQuery()\r\n  }\r\n\r\n  const onFilterPropertyChange = (value: SelectableValue<string>) => {\r\n    onChange({ ...query, filterProperty: value.value! })\r\n    onRunQuery()\r\n  }\r\n\r\n  const onIncludeGroupName = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    onChange({ ...query, includeGroupName: e.currentTarget.checked })\r\n    onRunQuery()\r\n  }\r\n\r\n  const onIncludeDeviceName = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    onChange({ ...query, includeDeviceName: e.currentTarget.checked })\r\n    onRunQuery()\r\n  }\r\n\r\n  const onIncludeSensorName = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    onChange({ ...query, includeSensorName: e.currentTarget.checked })\r\n    onRunQuery()\r\n  }\r\n\r\n  return (\r\n    <Stack direction=\"column\" gap={2}>\r\n      <Stack direction=\"row\" gap={2}>\r\n        <Stack direction=\"column\" gap={1}>\r\n          <InlineField label=\"Query Type\" labelWidth={20} grow>\r\n            <Select\r\n              options={queryTypeOptions}\r\n              value={query.queryType}\r\n              onChange={onQueryTypeChange}\r\n              width={47}\r\n            />\r\n          </InlineField>\r\n\r\n          <InlineField label=\"Group\" labelWidth={20} grow>\r\n            <Select\r\n              isLoading={isLoading}\r\n              options={lists.groups}\r\n              value={query.group}\r\n              onChange={onGroupChange}\r\n              width={47}\r\n              allowCustomValue\r\n              isClearable\r\n              isDisabled={!query.queryType}\r\n              placeholder=\"Select Group or type '*'\"\r\n            />\r\n          </InlineField>\r\n\r\n          <InlineField label=\"Device\" labelWidth={20} grow>\r\n            <Select\r\n              isLoading={!lists.devices.length}\r\n              options={lists.devices}\r\n              value={query.device}\r\n              onChange={onDeviceChange}\r\n              width={47}\r\n              allowCustomValue\r\n              placeholder=\"Select Device or type '*'\"\r\n              isClearable\r\n              isDisabled={!query.group}\r\n            />\r\n          </InlineField>\r\n        </Stack>\r\n\r\n        <Stack direction=\"column\" gap={2}>\r\n          <InlineField label=\"Sensor\" labelWidth={20} grow>\r\n            <Select\r\n              isLoading={!lists.sensors.length}\r\n              options={lists.sensors}\r\n              value={query.sensor}\r\n              onChange={onSensorChange}\r\n              width={47}\r\n              allowCustomValue\r\n              placeholder=\"Select Sensor or type '*'\"\r\n              isClearable\r\n              isDisabled={!query.device}\r\n            />\r\n          </InlineField>\r\n\r\n          {/* Channel seçimini sadece metrics modunda göster */}\r\n          <InlineField label=\"Channel\" labelWidth={20} grow>\r\n            <Select\r\n              isLoading={!lists.channels.length}\r\n              options={lists.channels}\r\n              value={(query.channels || []).map(c => ({ label: c, value: c })) || []}\r\n              onChange={onChannelChange}\r\n              width={47}\r\n              allowCustomValue\r\n              placeholder=\"Select Channel\"\r\n              isClearable\r\n              isMulti={true}\r\n              isDisabled={!query.sensor}\r\n            />\r\n          </InlineField>\r\n        </Stack>\r\n      </Stack>\r\n      \r\n      {/* Metrics modu için options */}\r\n      {isMetricsMode && (\r\n        <FieldSet label=\"Options\">\r\n          <Stack direction=\"row\" gap={1}>\r\n            <InlineField label=\"Include Group\" labelWidth={16}>\r\n              <InlineSwitch value={query.includeGroupName || false} onChange={onIncludeGroupName} />\r\n            </InlineField>\r\n            <InlineField label=\"Include Device\" labelWidth={15}>\r\n              <InlineSwitch value={query.includeDeviceName || false} onChange={onIncludeDeviceName} />\r\n            </InlineField>\r\n            <InlineField label=\"Include Sensor\" labelWidth={15}>\r\n              <InlineSwitch value={query.includeSensorName || false} onChange={onIncludeSensorName} />\r\n            </InlineField>\r\n          </Stack>\r\n        </FieldSet>\r\n      )}\r\n\r\n      {/* Text ve Raw modları için options */}\r\n      {(isTextMode || isRawMode) && (\r\n        <FieldSet label=\"Options\">\r\n          <Stack direction=\"row\" gap={1}>\r\n            <InlineField label=\"Property\" labelWidth={16}>\r\n              <Select\r\n                options={lists.properties}\r\n                value={query.property}\r\n                onChange={onPropertyChange}\r\n                width={32}\r\n              />\r\n            </InlineField>\r\n            <InlineField label=\"Filter Property\" labelWidth={16}>\r\n              <Select\r\n                options={lists.filterProperties}\r\n                value={query.filterProperty}\r\n                onChange={onFilterPropertyChange}\r\n                width={32}\r\n              />\r\n            </InlineField>\r\n          </Stack>\r\n        </FieldSet>\r\n      )}\r\n      {/* query selbt burada ben kendim urls getsensordteail vb veriler girip bir tabe panel olusttumak istiyorum . /api/getobjectproperty.htm?id=objectid&name=propertyname&show=text , /api/getsensordetails.xml?id=sensorid ,/api/getstatus.htm?id=0   */}\r\n\r\n    </Stack>\r\n  )\r\n}\r\n\r\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__781__","__WEBPACK_EXTERNAL_MODULE__531__","__WEBPACK_EXTERNAL_MODULE__7__","__WEBPACK_EXTERNAL_MODULE__308__","__WEBPACK_EXTERNAL_MODULE__959__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","p","slice","lastIndexOf","DataSource","DataSourceWithBackend","applyTemplateVariables","query","scopedVars","channel","getTemplateSrv","replace","filterQuery","getGroups","getResource","getDevices","group","Error","encodeURIComponent","getSensors","device","getChannels","objid","constructor","instanceSettings","super","annotations","QueryType","queryTypeOptions","keys","map","label","filterPropertyList","name","visible_name","propertyList","plugin","DataSourcePlugin","setConfigEditor","props","onOptionsChange","options","jsonData","secureJsonFields","secureJsonData","InlineField","labelWidth","interactive","tooltip","Input","id","onChange","event","path","target","placeholder","width","SecretInput","required","isConfigured","apiKey","onReset","cacheTime","parseInt","setQueryEditor","onRunQuery","datasource","isMetricsMode","queryType","Metrics","isRawMode","Raw","isTextMode","Text","setGroup","useState","setDevice","sensor","setSensor","setChannel","sensorId","setSensorId","lists","setLists","groups","devices","sensors","channels","values","properties","filterProperties","isLoading","setIsLoading","groupId","setGroupId","deviceId","setDeviceId","useEffect","fetchGroups","response","Array","isArray","groupOptions","toString","prev","console","error","fetchDevices","filteredDevices","filter","deviceOptions","fetchSensors","filteredSensors","sensorOptions","fetchChannels","channelOptions","propertyOptions","item","filterPropertyOptions","findGroupId","groupName","find","g","findDeviceId","deviceName","onGroupChange","groupObjId","onDeviceChange","deviceObjId","findSensorObjid","sensorName","s","onSensorChange","sensorObjId","Stack","direction","gap","grow","Select","allowCustomValue","isClearable","isDisabled","length","c","selectedChannels","v","isMulti","FieldSet","InlineSwitch","includeGroupName","e","currentTarget","checked","includeDeviceName","includeSensorName","property","filterProperty"],"sourceRoot":""}